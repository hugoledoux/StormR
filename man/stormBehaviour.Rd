% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stormBehaviour.R
\name{stormBehaviour}
\alias{stormBehaviour}
\title{Compute indicators of storm behaviour}
\usage{
stormBehaviour(
  sts,
  product = "MSW",
  method = "Willoughby",
  asymmetry = "V2",
  empirical_rmw = FALSE,
  format = "analytic",
  space_res = 10,
  time_res = 1,
  verbose = FALSE,
  focus_loi = TRUE
)
}
\arguments{
\item{sts}{Storms object}

\item{product}{character. Product to compute that is either
\itemize{
\item "MSW", Maximum Sustained Wind
\item "PDI", Power Dissipation Index
\item "Exposure", hours spent for each and all categories together
}
Default value is set to "MSW"}

\item{method}{character. Cyclonic model used to compute product, that is either
\itemize{
\item "Willoughby"
\item "Holland"
}
Default value is set to "Willoughby"}

\item{asymmetry}{character. Indicates which version of asymmetry to use in
the computations, that is either
\itemize{
\item "None", no asymmetry
\item "V1", first version
\item "V2, second version
}
Default value is set to "None".}

\item{empirical_rmw}{logical. Whether to compute the Radius of Maximum Wind
empirically, according to getRmw function or using the Radius of Maximum Wind
from the observations. Default value is set to FALSE}

\item{format}{either a character among "analytic" and "profiles":
\itemize{
\item  If "analytic", analytic rasters (integration in space and
time over the track) are returned.
\item  If "profiles", product input is
ignored and set to "MSW" and 2D wind speed structures for each observation
are returned.
}}

\item{space_res}{numeric. Space resolution (in km) for the raster(s) to compute.
Default value is set to 10km}

\item{time_res}{numeric. Period of time (hours) used to compute the
analytic raster(s). Allowed values are 1 (60min), 0.75 (45min), 0.5
(30min), and 0.25 (15min). Default value is set to 1}

\item{verbose}{logical. Whether or not the function must be verbose and
displays a text progress bar while operating. Default value is set to FALSE}

\item{focus_loi}{logical. Whether or not the computations are restricted to within
the spatial.loi.buffer from sts object. Default value is set to TRUE. Otherwise,
computations are extended over the whole track of the storms}
}
\value{
Depending on format input:
\itemize{
\item  If "analytic", analytic rasters (integration in space and time over the track)
are returned within a raster stack. Each layer is named after the storm and the product
computed as follow: stormName_product
\item If "profiles", product input is ignored and set to "MSW" and
2D wind speed structures for each observation are returned within a raster
stack. Each layer is named after the storm and the index of observation
computed as follow: stormName_profileIndex
<<<<<<< HEAD
\item If \code{data.frame}, computed product for each coordinates are returned
through a name numeric vector of dimension
\itemize{
\item (number of observations:number of point coordinates), if product == "MSW".
Correspond in fact of time series of wind speed along every observations
\item (1:number of point coordinates), if product == "PDI"
\item (6:number of point coordinates), if product == "Exposure"
}
=======
>>>>>>> upgrade
}
}
\description{
This function computes/rasterizes analytic products for each storm of a \code{Storms}
object, including Maximum Sustained Wind, Power Dissipation Index and Category exposure.
It can also rasterize the 2D wind speed structures or produce time series of wind speed
for every observations
}
\examples{
#Compute MSW for PAM 2015 in Vanuatu using default settings
msw_pam <- stormBehaviour(pam)

#Compute PDI for ERICA and NIRAN in New Caledonia using Holland model without asymmetry
pdi_nc <- stormBehaviour(sts_nc, time_res = 0.5, method = "Holland",
                        product = "PDI", verbose = TRUE)

#Compute Exposure for PAM 2015 in Vanuatu using default settings
exp_pam <- stormBehaviour(pam, product = "Exposure")

#Compute profiles wind speed for ERICA and NIRAN in New Caledonia using default settings
prof_nc <- stormBehaviour(sts_nc, format = "profiles", verbose = TRUE)

}
