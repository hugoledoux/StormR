[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/StormR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"StormR","text":"vignette teaches use StormR package solving basic problems. StormsDataset used within document relies IBTrACS.SP.v04r00.nc. dataset gathers tropical depressions, storms cyclones occured South Pacific ocean since 1980. available package named IBTRACS_SP also default setting retrieve storms using Storms function (See next section).","code":""},{"path":[]},{"path":"/articles/StormR.html","id":"get-data-associated-with-storms","dir":"Articles","previous_headings":"Solve common problems","what":"Get data associated with storms","title":"StormR","text":"StormsDataset loaded, first thing select storms interested . operation done using Storms function. collects storms coming StormsDataset (sds input) certain Location Interest (loi input). searching location extended using max_dist input, default value set 300km. Note 2 inputs mandatory perform function (See Storms Documentation). also possible filter storms cyclonic seasons names (season input names). Finally, storms maximum wind speed inferior 18 m/s (Tropical Depressions Saffir Simpson Hurricane Scale SSHS) can ignored using remove_TD logical input. Default value set TRUE. basic usage Storms function. case, get data associated tropical cyclone Harold hit Vanuatu 2020. Note loi represents whole country. (See Storms documentation get full list country available). second example, collect data tropical storms cyclones Exclusive Economic Zone New Caledonia (eezNC) 2000 2022. loi sf object, can also shapefile. last example, retrieve data associated tropical storms cyclones occured since 1980 around point coordinate 188.17: -13.92 (longitude, latitude decimal degree) within 300km buffer. coordinates actually located American Samoa.","code":"harold <- Storms(loi = \"Vanuatu\", names = \"HAROLD\") sts.nc <- Storms(loi = eezNC, seasons = c(2000,2022)) pt <- c(188.17,-13.92) sts.pt <- Storms(loi = pt)"},{"path":"/articles/StormR.html","id":"access-data","dir":"Articles","previous_headings":"Solve common problems","what":"Access data","title":"StormR","text":"Storms function returns data collected tropical storms cyclone Storms object especially designed purpose (See Storms class). , one can interested getting basics informations Storms object initialized Storms. However structure object quite complex can rapidly become overwhelming trying reach data . getters help saving time access data. now , demonstrate use using sts.nc Storms object initialized right . First , interested getting storms names just run following getter: Also, storms Storms object, following getters return cyclonic season maximum category reached SSHS: getter simply returns number storms provided Storms Object: next 3 getters useful retrieve spatial informations Location Interest Storms object. first command return LOI converted sf format: second command simply returns size (km) buffer used extent LOI: Finally third command provides LOI extended buffer sf format. One can also interested getting informations particular storm. operation achieved using following getter: Note: serveral storms share name, must specify cyclonic season differenciate . example, 2 storms named Evan provided within sts.pt Storms object initialized first section. first command return error, specify one interested . thus tackle issue using next 2 commands: theses getters designed retrieve general informations first levels Storms objects. However can go object getting data particular storm. Combined getStorm getter, following command perform really well. command provides cyclonic season particular storm: command provides maximum category reached sshs particular storm: command provides number observations available particular storm: command provides observations particular storm: command provides index observations within spatial buffer particular storm:","code":"getNames(sts = sts.nc) #Get cyclonic seasons getSeasons(sts = sts.nc) #Get maximum reached category in SSHS getSSHS(sts = sts.nc) getNbStorms(sts = sts.nc) getLOI(sts = sts.nc) getBufferSize(sts = sts.nc) getBuffer(sts = sts.nc) niran <- getStorm(sts = sts.nc, name = \"NIRAN\") #getStorm(sts = sts.pt, name = \"EVAN\") evan1997 <- getStorm(sts = sts.pt, name = \"EVAN\", season = 1997) evan2013 <- getStorm(sts = sts.pt, name = \"EVAN\", season = 2013) #getStorm_season(niran) #Equivalent to getSeason(getStorm(sts = sts.nc, name = \"NIRAN\")) #getStorm_sshs(niran) #Equivalent to getsshs(getStorm(sts = sts.nc, name = \"NIRAN\")) #getStorm_nbObs(niran) #Equivalent to getNbObs(getStorm(sts = sts.nc, name = \"NIRAN\")) #getStorm_obs(niran) #Equivalent to getObs(getStorm(sts = sts.nc, name = \"NIRAN\")) #getStorm_inObs(niran) #Equivalent to getInObs(getStorm(sts = sts.nc, name = \"NIRAN\"))"},{"path":"/articles/StormR.html","id":"plot-data-associated-with-storms","dir":"Articles","previous_headings":"Solve common problems","what":"Plot data associated with storms","title":"StormR","text":"interesting feature package plotStorms function let plot track(s) storm(s) provided Storms object Location Interest, using different settings (See plotStorms documentation get available input). basics usages function. example, plot tropical cyclone Harold track Vanuatu alongside labeled observations. Default setting used plot labels: every 24h right side observations. second example, plot tropical cyclone Erica (2003) Cook (2017), EEZ New Caledonia alongside labeled observations (case every ??H). last example, plot every tropical cyclone reached category 5 (SSHS) around American Samoa, alongside labeled observations.","code":"plotStorms(harold, labels = TRUE) plotStorms(sts.nc, names = c(\"ERICA\", \"COOK\"), labels = TRUE, by = 12) plotStorms(sts.pt, category = 5, labels = TRUE)"},{"path":"/articles/StormR.html","id":"computing-rasterized-products","dir":"Articles","previous_headings":"Solve common problems","what":"Computing rasterized products","title":"StormR","text":"important functionality provided package far spatialBehaviour function.","code":"prod.harold <- spatialBehaviour(harold, product = c(\"MSW\", \"PDI\", \"Exposure\")) prof.harold <- spatialBehaviour(harold, product = \"Profiles\")"},{"path":"/articles/StormR.html","id":"computing-point-wise-products","dir":"Articles","previous_headings":"Solve common problems","what":"Computing point wise products","title":"StormR","text":"","code":"luganville.pt <- data.frame(lon = 167.1667 , lat = -15.5333)  ts.luganville <- temporalBehaviour(harold, points = luganville.pt)"},{"path":"/articles/StormR.html","id":"visualize-products","dir":"Articles","previous_headings":"Solve common problems","what":"Visualize products","title":"StormR","text":"##Save product","code":"plotBehaviour(harold, prod.harold[[\"HAROLD_MSW\"]]) plotBehaviour(harold, prod.harold[[\"HAROLD_PDI\"]]) plotBehaviour(harold, prod.harold[[\"HAROLD_Exposure_58\"]]) writeRast(prod.harold, path = paste0(tempdir(),\"/\"))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Baptiste Delaporte. Author, maintainer. Thomas Ibanez. Author. Gunnar Keppel. Author. Swen Jullien. Author. Christophe Menkes. Author. Thomas Arsouze. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delaporte B, Ibanez T, Keppel G, Jullien S, Menkes C, Arsouze T (2023). StormR: R Package Compute Behaviour Regime Winds Generated Tropical Storms. R package version 0.1.0.","code":"@Manual{,   title = {StormR: A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms},   author = {Baptiste Delaporte and Thomas Ibanez and Gunnar Keppel and Swen Jullien and Christophe Menkes and Thomas Arsouze},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"StormR R package allowing easily extract tropical cyclone data given locations areas interests, generate tropical cyclone wind fields, compute statistics characterising behaviour tropical cyclone winds (maximum sustained wind speed, power dissipation index, time exposure different wind speeds).","code":""},{"path":"/index.html","id":"data-source","dir":"","previous_headings":"","what":"Data source","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"run StormR functions users provide tropical cyclone storm track dataset location characteristics storms given across lifespan. default propose use data provided USA agencies IBTrACS database International Best Track Archive Climate Stewardship (Knapp et al., 2010). database provides fairly comprehensive record worldwide tropical storms cyclones 3-hours temporal resolution since 1841. databases can used long following fields provided: *Units: running functions stormR converts nautical miles (nm) kilometres (km), knots (kt) meters per second (m.s−1), millibar (mb) Pascal (Pa)","code":""},{"path":"/index.html","id":"wind-field-models","dir":"","previous_headings":"","what":"Wind field models","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Using data StormR computes radial wind speed vr (m.s−1) distance r (km) center storm using parametric models. Two widely used models developed Holland (1980) Willoughby et al. (2006) available.","code":""},{"path":"/index.html","id":"holland-1980","dir":"","previous_headings":"Wind field models","what":"Holland (1980)","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"$$ v_r = \\sqrt{\\frac{b}{\\rho}\\left(\\frac{rmw}{r}\\right)^b (poci - pc)e^{-\\left(\\frac{rmw}{r}\\right)^b} + \\left(\\frac{rf}{2}\\right)^2} - \\left(\\frac{rf}{2}\\right) $$ vr radial wind speed (m.s−1) r distance eye storm (km) msw maximum sustained wind speed (m.s−1) rmw radius maximum sustained wind speed (km) pc pressure center storm (pressure mb) poci pressure outermost closed isobar storm (mb) ρ = 1.15 air density (kg.m−3) f = 2 × 7.29 × 10−5sin (ϕ) Coriolis force (N.kg−1, ϕ latitude) $b = \\frac{\\rho e \\times msw^2}{poci - pc}$ shape parameter","code":""},{"path":"/index.html","id":"willoughby-et-al-2006","dir":"","previous_headings":"Wind field models","what":"Willoughby et al. (2006)","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"$$ \\left\\{ \\begin{aligned} v_r &= msw\\left(\\frac{r}{rmw}\\right)^{n} \\quad \\quad r < rmw \\\\ v_r &= msw\\left((1-)e^{-\\frac{|r-rmw|}{X1}} + e^{-\\frac{|r-rmw|}{X2}}\\right) \\quad \\quad r \\geq rmw \\\\ \\end{aligned} \\right. $$ vr radial wind speed (m.s−1) r distance eye storm (km) msw maximum sustained wind speed (m.s−1) rmw radius maximum sustained wind speed (km) X1 = 287.6 − 1.942msw + 7.799ln (rmw) + 1.819|ϕ|X2 = 25 n = 2.1340 + 0.0077msw − 0.4522ln (rmw) − 0.0038|ϕ| = 0.5913 + 0.0029msw − 0.1361ln (rmw) − 0.0042|ϕ|(≥0)ϕ latitude center storm Note models rmw provided approximated using empirical formula derived Willoughby et al. (2006)rmw = 46.4e(−0.0155msw+0.0169|ϕ|)","code":""},{"path":"/index.html","id":"asymmetry","dir":"","previous_headings":"","what":"Asymmetry","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"models compute radial wind speeds symmetric around center storm. However, winds rarely symmetric around center notably translation movement storm (Yan Zhang, 2022). therefore realistic add symmetry wind field generated models. propose use model developed Boose et al. (2001): $v_{r_{}} = v_r - S(1-\\sin(\\alpha))\\frac{v_h}{2}$ vras   new radial wind speed asymmetry (m.s−1) vr   former radial wind speed without asymmetry (m.s−1) vh   velocity storm (m.s−1) S Asymmetry coefficient (usually set 1) α   tha angle storm direction point vras computed. Clockwise Nothern hemisphere, counterclokwise Southern hemisphere.","code":""},{"path":"/index.html","id":"wind-direction","dir":"","previous_headings":"","what":"Wind Direction","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Wind direction D (degree) point computed according following formula: D = Az − 90 −     ϕ > 0 (North hemisphere)D = Az + 90 +     ϕ < 0 (South hemisphere) Az   azimuth point storm center    cross isobar inflow angle either 20° water 40° land ϕ   latitude center storm","code":""},{"path":"/index.html","id":"products","dir":"","previous_headings":"","what":"Products","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Based computed wind fields, stormR allows compute different products allowing characterise behaviour winds across time space given specific locations (.e., given longitude/latitude coordinates) cells regular grid (.e., raster). Three products available:","code":""},{"path":"/index.html","id":"maximum-sustained-wind-speed","dir":"","previous_headings":"Products","what":"Maximum Sustained Wind speed","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Maximum Sustained Wind speed (MSW, m.s−1) lifespan storm computed follow: max (v(t)|t∈[0,T]) t time observationT lifespan storm","code":""},{"path":"/index.html","id":"power-dissipation-index-pdi","dir":"","previous_headings":"Products","what":"Power Dissipation Index (PDI)","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"power dissipation index (PDI, J.m2) total power dissipated tropical storm lifespan (Kerry, 1999, 2005) computed follow: ∫TρCdvr3dt t time observationT lifespan stormρ air density fixed 1 kg.m−3 Kerry (1999)Cd drag coefficient storm fixed 2 X 10−3 Kerry (1999)","code":""},{"path":"/index.html","id":"time-of-exposure","dir":"","previous_headings":"Products","what":"Time of exposure","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Time exposure (hours) minimum wind speed threshold follow: ∫Tc(vt)dt $$ \\left\\{ \\begin{aligned} c(v_t) &= 1 \\quad \\quad v_t \\geq Thd\\\\ c(v_t) &= 0 \\quad \\quad v_t < Thd\\\\ \\end{aligned} \\right. $$ wheret time observationT lifespan stormvt maximum sustained wind speed time t (m.s−1)Thd minimum wind sped threshold (m.s−1) default time exposure computed Saffir-Simpson Hurricane Scale threshold values tropical cyclone categories (.e., 33, 43, 50 ,58, 70 m.s−1)","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Boose, E. R., Chamberlin, K. E., & Foster, D. R. (2001). Landscape Regional Impacts Hurricanes New England. Ecological Monographs, 71(1), Article 1. https://doi.org/10.1890/0012-9615(2001)071[0027:LARIOH]2.0.CO;2 Holland, G. J. (1980). Analytic Model Wind Pressure Profiles Hurricanes. Monthly Weather Review, 108(8), 1212–1218. https://doi.org/10.1175/1520-0493(1980)108<1212:AAMOTW>2.0.CO;2 Emanuel, K. . (1999). power hurricane: example reckless driving information superhighway. Weather, 54(4), 107–108. https://doi.org/10.1002/j.1477-8696.1999.tb06435.x Emanuel, K. (2005). Increasing destructiveness tropical cyclones past 30 years. Nature, 436(7051), Article 7051. https://doi.org/10.1038/nature03906 Knapp, K. R., Kruk, M. C., Levinson, D. H., Diamond, H. J., & Neumann, C. J. (2010). International Best Track Archive Climate Stewardship (IBTrACS). Bulletin American Meteorological Society, 91(3), Article 3. https://doi.org/10.1175/2009bams2755.1 Willoughby, H. E., Darling, R. W. R., & Rahn, M. E. (2006). Parametric Representation Primary Hurricane Vortex. Part II: New Family Sectionally Continuous Profiles. Monthly Weather Review, 134(4), 1102–1120. https://doi.org/10.1175/MWR3106.1 Yan, D., & Zhang, T. (2022). Research progress tropical cyclone parametric wind field models application. Regional Studies Marine Science, 51, 102207. https://doi.org/10.1016/j.rsma.2022.102207","code":""},{"path":[]},{"path":"/index.html","id":"installing-stormr-package-from-github","dir":"","previous_headings":"Usage","what":"Installing StormR package from GitHub","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"","code":"#install.packages(\"devtools\") devtools::install_github(\"umr-amap/StormR\")"},{"path":"/index.html","id":"loading-stormr-package","dir":"","previous_headings":"Usage","what":"Loading StormR package","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"","code":"library(StormR)"},{"path":"/index.html","id":"using-the-data-provided-by-usa-agencies-in-the-ibtracs-database","dir":"","previous_headings":"Usage","what":"Using the data provided by USA agencies in the IBTrACS database","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"","code":"blabla"},{"path":"/index.html","id":"getting-and-ploting-tropical-cyclone-track-data","dir":"","previous_headings":"Usage","what":"Getting and ploting tropical cyclone track data","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"getStorms function allows get track data given tropical cyclone set tropical cyclones nearby given location interest (default 300 km around specified location interest). location interest can country, specific point set points defined longitude latitude coordinates, user imported defined spatial polygon shapefiles. Users can also select tropical cyclones names season occurrence. plotStorms can used visualise trajectories points observation tropical cyclones map. E.g. getting data tropical cyclone PAM (2015) nearby Vanuatu E.g. getting data tropical cyclones nearby Nouméa (longitude = 166.45, latitude = -22.27) since 1980 plotting category 4 5 tropical cyclones (Saffir-Simpson hurricane wind scale) tropical cyclone Niran. E.g. getting data tropical cyclones nearby area defined using imported shape file, exclusive economic zone New Caledonia, 2010 2020.","code":"st <- getStorms(loi = \"Vanuatu\", names = \"PAM\") plotStorms(st, labels=TRUE) pt <- c(166.45,-22.27) st <- getStorms(loi = pt) plotStorms(st, category = c(4,5), labels=TRUE) plotStorms(st, names=\"NIRAN\", labels=TRUE) sp <- eezNC st <- getStorms(loi = eezNC, season=c(2010,2020)) plotStorms(st, labels=FALSE)"},{"path":"/index.html","id":"computing-and-plotting-2d-wind-fields","dir":"","previous_headings":"Usage","what":"Computing and plotting 2D wind fields","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"stormBehaviour_sp function allows computing 2D tropical cyclone wind fields using parametric models different spatial temporal resolutions (default spatial resolution 2.5 min, .e. ~4.5 km equator default temporal resolution 1 h). using “Profiles” product stormBehaviour_sp function plotBehaviour function allows plotting 2D wind profile given time observation. E.g. computing plotting 2D wind profiles generated topical cyclone Pam (2015) near island Efate (Vanuatu)","code":"st <- getStorms(loi = \"Vanuatu\", names = \"PAM\") profile <- stormBehaviour_sp(st, product = \"Profiles\") plotBehaviour(st,profile[[\"PAM_Profiles_41\"]])"},{"path":"/index.html","id":"computing-and-plotting-time-series-of-wind-speed-and-direction","dir":"","previous_headings":"Usage","what":"Computing and plotting time series of wind speed and direction","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"stormBehaviour_pt function allows computing wind speed direction given location set locations (provided data frame “long” “lat” columns) along lifespan tropical cyclone. E.g. computing plotting time series speed direction winds generated topical cyclone Pam (2015) Efate (longitude = 168.33, latitude = -17.73) Vanuatu.","code":"df<-data.frame(lon=168.33,lat=-17.73) st <- getStorms(loi = \"Vanuatu\", names = \"PAM\") ts <- stormBehaviour_pt(st, points = df) plot(ts$PAM[,1]~ts$PAM[,3],type=\"b\",xlab=\"Observation ID\",ylab=\"Wind speed (m/s)\") plot(ts$PAM[,2]~ts$PAM[,3],type=\"b\",xlab=\"Observation ID\",ylab=\"Wind direction (degree north)\")"},{"path":"/index.html","id":"computing-plotting-and-exporting-wind-behaviour-products","dir":"","previous_headings":"Usage","what":"Computing, plotting, and exporting wind behaviour products","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"Beside computing 2D tropical cyclone wind fields, stormBehaviour_sp function allows computing different products allowing characterise behaviour winds across time space. Three products available: maximum sustained wind speed, power dissipation index, time exposure minimum wind speed threshold. products can plotted using plotBehaviour function exported raster files using writeRast function. E.g. computing plotting 2D maximum sustained wind speed, power dissipation index, time exposure category 3 higher (>49 m.s−1) winds generated topical cyclone Pam (2015) nearby Vanuatu. #Load data tropical cyclone Pam hit Vanuatu 2015 st <- Storms(loi = “Vanuatu”, names = “PAM”)","code":"#Compute maximum sustained wind speed (MSW), power dissipation index (PDI), and exposure time (EXP) with default settings (the analytic model from Willoughby et al. 2006 with asymmetry). The function returns a raster with a 2.5min spatial resolution by default. st_prod <- spatialBehaviour(st, product = c(\"MSW\", \"PDI\", \"Exposure\"))   #Plot the MSW, PDI, and an Exposure rasters alongside with the track of the storm and the limit of the location of interest split.screen(c(1,3)) screen(1) plotBehaviour(st, st_prod[[\"PAM_MSW\"]], labels = T) screen(2) plotBehaviour(st, st_prod[[\"PAM_PDI\"]], labels = T) screen(3) plotBehaviour(st, st_prod[[\"PAM_Exposure_50\"]], labels = T)   #Export the MSW raster in a given directory (here a temporary directory) writeRast(st_prod[[\"PAM_MSW\"]], path = paste0(tempdir(),\"/\"))      ################################################ #Several tropical cyclones over a given country# ################################################  #Load all tropical cyclones that have passed nearby New Caledonia between 2019 and 2021 sts <- Storms(loi = \"New Caledonia\", seasons = c(2019, 2021))  #Plot all tropical cyclone tracks and observations over or around the location of interest plotStorms(sts, labels = T, legends = T)  #Plot only the track and observations for only one of the tropical cyclones (here Niran) plotStorms(sts, names = \"NIRAN\", labels = T)  #Compute PDI rasters for all tropical cyclones with the default values sts_pdi <- spatialBehaviour(sts, product = \"PDI\")  #Plot the PDI for the tropical cyclone Niran alongside with the its track plotBehaviour(sts, sts_pdi[[\"NIRAN_PDI\"]], labels = T)    ################################################################## #Tropical cyclones around a spatial polygon (created or imported)# ##################################################################  #Load all tropical cyclones that have passed nearby the EEZ of New Caledonia between 1980 and 2022 stsEEZnc <- Storms(loi = eezNC)  #Plot category 3 tropical cyclones (Saffir-Simpson hurricane wind scale, SSHWS) plotStorms(stsEEZnc, category = 3)   ################################################# #Tropical cyclones around a given point location# #################################################  #Set point location coordinates, lat/long, in decimal degrees (WGS84) pt <- c(188.17,-13.92) #Get all tropical cyclones that had passed near the point (by default <= 300 km away) stsPt <- Storms(loi = pt)  #Plot all tropical cyclone tracks and observations around the point of interest plotStorms(stsPt)  #Plot only category 4 or 5 tropical cyclones (Saffir-Simpson hurricane wind scale, SSHWS) plotStorms(stsPt, category = c(4,5), labels = T)   ################################ #Time series at given locations# ################################  #Compute time series of wind speed at given location using coordinates provided in a data frame df <- data.frame(lon = c(166.5, 166.7), lat = c(-22.1, - 22.3)) wind_ts <- stormBehaviour_pt(sts, points = df)  plot(wind_ts$NIRAN[,2], type = \"b\", ylab = \"maximum sustained wind speed (m/s)\")     ########################## #Tropical cyclone profile# ##########################  #Make a location of interest around Espiritu Santo in Vanuatu pol <- sf::st_sfc(sf::st_polygon(list(cbind(c(167,168,168,167,167),c(-16,-16,-13,-13,-16))))) loi <- sf::st_sf(pol, crs = 4326)  #Load the data for the tropical cyclone Harold which hit the Vanuatu in 2020 harold <- Storms(loi = loi, names= \"HAROLD\")  #Compute wind profiles using Willoughby model with asymmetry profWillV1 <- spatialBehaviour(harold, product = \"Profiles\")  #Compute wind profiles using Holland model with asymmetry profHollV2 <- spatialBehaviour(harold, product = \"Profiles\", method = \"Holland\")  #Compare few profiles between the two above differents methods and asymmetries plotBehaviour(harold,profWillV1[\"HAROLD_Profiles_40\"], labels = T, xlim = c(166,168), ylim = c(-16.5, -14)) plotBehaviour(harold,profHollV2[\"HAROLD_Profiles_40\"], labels = T, xlim = c(166,168), ylim = c(-16.5, -14))  plotBehaviour(harold,profWillV1[\"HAROLD_Profiles_41\"], labels = T, xlim = c(166,168), ylim = c(-16.5, -14)) plotBehaviour(harold,profHollV2[\"HAROLD_Profiles_41\"], labels = T, xlim = c(166,168), ylim = c(-16.5, -14))   plotBehaviour(harold,profWillV1[\"HAROLD_Profiles_43\"], labels = T, xlim = c(166,168), ylim = c(-16.5, -14)) plotBehaviour(harold,profHollV2[\"HAROLD_Profiles_43\"], labels = T, xlim = c(166,168), ylim = c(-16.5, -14))"},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"question suggestion want report bug, please via GitHub issues. Thanks , greatly help us improve package.","code":""},{"path":"/reference/IBTRACS_SP.html","id":null,"dir":"Reference","previous_headings":"","what":"South Pacific storms database — IBTRACS_SP","title":"South Pacific storms database — IBTRACS_SP","text":"Database extracted IBTrACS.SP.v04r00.nc file. provides tropical cyclones occured SP Basin 1867 nowadays","code":""},{"path":"/reference/IBTRACS_SP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"South Pacific storms database — IBTRACS_SP","text":"","code":"IBTRACS_SP"},{"path":[]},{"path":"/reference/IBTRACS_SP.html","id":"ibtracs-sp","dir":"Reference","previous_headings":"","what":"IBTRACS_SP","title":"South Pacific storms database — IBTRACS_SP","text":"StormsDataset object","code":""},{"path":"/reference/Storm-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Storm  object — Storm-class","title":"Storm  object — Storm-class","text":"Gather needed informations model single storm","code":""},{"path":"/reference/Storm-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Storm  object — Storm-class","text":"name character. Name storm season numeric. Cyclonic season storm occured sshs numeric. Maximum category reached Saffir Simpson Hurricane Scale obs numeric vector. Indices observations within location interest extented corresponding buffer (See StormsList class) obs.data.frame. Contains observations available. observation made several fields : iso.time, Date hours observations (UTC) lon, Longitude coordinate (deg) lat, Latitude coordinate (deg) msw, Maximum Sustained Wind (m/s) sshs, Category Saffir Simpson Hurricane Scale following field mandatory highly recommand rmw, Radius Maximum Wind (km) Also, following fields mandatory perform Holland model (See Details) pres, Pressure center (mb) poci, Pressure Outermost Closed Isobar (mb)","code":""},{"path":"/reference/Storms.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a StormsList object — Storms","title":"Initialize a StormsList object — Storms","text":"function returns StormsList object gathers storms specified user","code":""},{"path":"/reference/Storms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a StormsList object — Storms","text":"","code":"Storms(   sds = IBTRACS_SP,   loi,   seasons = c(1980, max(sds@database$seasons, na.rm = T)),   names = NULL,   max_dist = 300,   remove_TD = TRUE,   verbose = 2 )"},{"path":"/reference/Storms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a StormsList object — Storms","text":"sds StormsDataset object. Default value set IBTRACS_SP database provided package based IBTrACS.SP.v04r00.nc file. (See StormsDataset class) loi Location Interest. Must either: SpatialPolygon (shapefile) sf object point longitude/latitude coordinates provided numeric vector character representing country (See Details section) seasons numeric vector. either one range calendar years. cyclones formed one year dissipated following year, latter used. Default values allow searching storms 1980 maximum cyclonic season available StormsDataSet object names character vector. Names storms capital letters. Default value set NULL. max_dist numeric. Indicates buffer distance (km) used extend location interest. Default value set 300km remove_TD logical. Whether remove tropical depressions (< 18 m/s) include cyclones . Default value set TRUE verbose numeric. Whether function display informations process, outputs, additional notes. Allowed values : 0: Nothing displayed 1: Informations process displayed 2: Outputs also displayed 3: Additional notes manipulate StormsList objects also displayed Default value set 2","code":""},{"path":"/reference/Storms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a StormsList object — Storms","text":"StormsList object gathers storms match criteria given inputs","code":""},{"path":"/reference/Storms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a StormsList object — Storms","text":"Available countries loi input provided rwolrdxtra package, derived newest version Natural Earth Data. Check following link informations: http://www.naturalearthdata.com/downloads/10m-cultural-vectors/","code":""},{"path":"/reference/Storms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a StormsList object — Storms","text":"","code":"if (FALSE) { #Get data for a single storm on a given country pam <- Storms(loi = \"Vanuatu\", names = \"PAM\")  #Get data for the above storm on a point coordinates (Eastern/Northern degree) pt <- c(169, -19) pam.pt <- Storms(loi = pt, names = \"PAM\")  #Get data for two storms over New Caledonia sts_nc <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  #Get data for every storms that occured in the SP basin between 2010 and 2020 poly <- cbind(c(135, 290, 290, 135, 135),c(-60, -60, 0, 0, -60)) sp <- sf::st_polygon(list(poly)) sp <- sf::st_sfc(sp, crs = 4326) sp <- sf::st_as_sf(sp) sts_sp <- Storms(loi = sp, seasons = c(2010,2020)) }"},{"path":"/reference/StormsDataset-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StormsDataset object — StormsDataset-class","title":"StormsDataset object — StormsDataset-class","text":"Choose database use within package's functions","code":""},{"path":"/reference/StormsDataset-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"StormsDataset object — StormsDataset-class","text":"fields input must provide least 6 mandatory fields (11) order benefit functionalities package: field called \"name\": dimension contains names storms netcdf database field called \"seasons\": dimension contains cyclonic seasons storms netcdf database field called \"isoTime\": dimension contains ISO times (3 6 hourly) observations storms database field called \"lon\": dimension contains longitude coordinates (Eastern degree) observations storms netcdf database field called \"lat\": dimension contains latitude coordinates (Nothern degree) observations storms netcdf database field called \"msw\": dimension contains maximum sustained wind speed (knt) observations storms netcdf database following fields optional highly recommanded: field called \"basin\": dimension contains basin location storms netcdf database. Used filter storms netcdf database field called \"rmw\": dimension contains radius maximum wind speed (nm) observations storms netcdf database (See spatialBehaviour, temporalBehaviour) field called \"sshs\": dimension contains Saffir Simpson Hurricane Scale index observations storms netcdf database Finally following fields optional mandatory perform Holland model (See spatialBehaviour, temporalBehaviour) field called \"pressure\": dimension contains pressure (mb) eye observations storms netcdf database field called \"poci\": dimension contains Pressure Outermost Closed Isobar (mb) observations storms nectdf database Default value set according relevant dimensions IBTraCS databases: fields = fields = c(\"basin\" = \"basin\", \"names\" = \"name\", \"seasons\" = \"season\", \"isoTime\" = \"iso_time\", \"lon\" = \"usa_lon\", \"lat\" = \"usa_lat\", \"msw\" = \"usa_wind\", \"rmw\" = \"usa_rmw\", \"pressure\" = \"usa_pres\", \"poci\" = \"usa_poci\", \"sshs\" = \"usa_sshs\")","code":""},{"path":"/reference/StormsDataset-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StormsDataset object — StormsDataset-class","text":"filename character. Name database load. Must netcdf file fields named character vector. Dictionary provides name dimensions extract netcdf database (See Details) basin character. Basin name filter database within boundaries. Default value set NULL. must either \"NA\": North Atlantic \"SA\": South Atlantic \"EP\": Eastern North Pacific \"WP\": Western North Pacific \"SP\": South Pacific \"SI\": South India \"NI\": North India database list 6 10 slots depending fields input. slot either 1D array dimension (number storms), \"names\" \"seasons\" fields, 2D array dimension (Maximum number observations:number storms), remaining fields \"isoTime\", \"lon\", \"lat\", \"msw\", \"rmw\", \"pressure\", \"poci\", \"sshs\"","code":""},{"path":"/reference/StormsList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StormsList object — StormsList-class","title":"StormsList object — StormsList-class","text":"Gather needed informations model set storms","code":""},{"path":"/reference/StormsList-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StormsList object — StormsList-class","text":"data list Storm objects (See Storm class) buffer numeric. Buffer used extent spatial.loi (km) spatial.loi sf object. Represents location interest. Projection EPSG:4326 spatial.loi.buffer sf object. Buffer extension spatial.loi","code":""},{"path":"/reference/defDatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a StormsDataset object — defDatabase","title":"Initialize a StormsDataset object — defDatabase","text":"Initialize StormsDataset object","code":""},{"path":"/reference/defDatabase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a StormsDataset object — defDatabase","text":"","code":"defDatabase(   filename = system.file(\"extdata\", \"IBTrACS.SP.v04r00.nc\", package = \"StormR\"),   fields = c(basin = \"basin\", names = \"name\", seasons = \"season\", isoTime = \"iso_time\",     lon = \"usa_lon\", lat = \"usa_lat\", msw = \"usa_wind\", sshs = \"usa_sshs\", rmw =     \"usa_rmw\", pressure = \"usa_pres\", poci = \"usa_poci\"),   basin = \"SP\",   verbose = TRUE )"},{"path":"/reference/defDatabase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a StormsDataset object — defDatabase","text":"filename character. Name database load. Must netcdf file fields named character vector. Dictionary provides name dimension extract netcdf database (See StormsDataSet class) basin character. Basin name filter database within boundaries. Default value set NULL. must either \"NA\": North Atlantic \"SA\": South Atlantic \"EP\": Eastern North Pacific \"WP\": Western North Pacific \"SP\": South Pacific \"SI\": South India \"NI\": North India verbose logical. Whether function display informations process","code":""},{"path":"/reference/defDatabase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a StormsDataset object — defDatabase","text":"object class StormsDataset","code":""},{"path":"/reference/eezNC.html","id":null,"dir":"Reference","previous_headings":"","what":"EEZ of New Caledonia — eezNC","title":"EEZ of New Caledonia — eezNC","text":"Provide geographic limits eez New Caledonia","code":""},{"path":"/reference/eezNC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EEZ of New Caledonia — eezNC","text":"","code":"eezNC"},{"path":[]},{"path":"/reference/eezNC.html","id":"eeznc","dir":"Reference","previous_headings":"","what":"eezNC","title":"EEZ of New Caledonia — eezNC","text":"sf object","code":""},{"path":"/reference/getBuffer-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the extended LOI from a Storms object — getBuffer","title":"Get the extended LOI from a Storms object — getBuffer","text":"Get Extended Location Interest StormsList object","code":""},{"path":"/reference/getBuffer-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the extended LOI from a Storms object — getBuffer","text":"","code":"getBuffer(sts)"},{"path":"/reference/getBuffer-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the extended LOI from a Storms object — getBuffer","text":"sts StormsList object","code":""},{"path":"/reference/getBuffer-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the extended LOI from a Storms object — getBuffer","text":"sf object. Extended Location Interest given StormsList object","code":""},{"path":"/reference/getBuffer-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the extended LOI from a Storms object — getBuffer","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\")) buff <- getBuffer(sts) }"},{"path":"/reference/getBufferSize-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get buffer size from a Storms object — getBufferSize","title":"Get buffer size from a Storms object — getBufferSize","text":"Get buffer size StormsList object","code":""},{"path":"/reference/getBufferSize-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get buffer size from a Storms object — getBufferSize","text":"","code":"getBufferSize(sts)"},{"path":"/reference/getBufferSize-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get buffer size from a Storms object — getBufferSize","text":"sts StormsList object","code":""},{"path":"/reference/getBufferSize-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get buffer size from a Storms object — getBufferSize","text":"numeric. Buffer size (km) used generate extended location interest given StormsList object","code":""},{"path":"/reference/getBufferSize-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get buffer size from a Storms object — getBufferSize","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\")) buffsize <- getBufferSize(sts) }"},{"path":"/reference/getInObs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get indices of observations within the extended LOI — getInObs","title":"Get indices of observations within the extended LOI — getInObs","text":"Get indices observations within extended Location Interest given storm","code":""},{"path":"/reference/getInObs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get indices of observations within the extended LOI — getInObs","text":"","code":"getInObs(s, ...)"},{"path":"/reference/getInObs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get indices of observations within the extended LOI — getInObs","text":"s Storm/StormsList object name character. Name storm extract capital letters season numeric. Cyclonic season storm extract. Used several storms StormsList object share name. Default value set NULL","code":""},{"path":"/reference/getInObs-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get indices of observations within the extended LOI — getInObs","text":"numeric vector. Indices within extended LOI given Storm object","code":""},{"path":"/reference/getInObs-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get indices of observations within the extended LOI — getInObs","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  ## For storm Niran getInObs(getStorm(sts, name = \"NIRAN\"))  ## Equivalent to  getInObs(sts, name = \"NIRAN\") }"},{"path":"/reference/getLOI-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LOI from a Storms object — getLOI","title":"Get LOI from a Storms object — getLOI","text":"Get Location Interest StormsList object","code":""},{"path":"/reference/getLOI-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LOI from a Storms object — getLOI","text":"","code":"getLOI(sts)"},{"path":"/reference/getLOI-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LOI from a Storms object — getLOI","text":"sts StormsList object","code":""},{"path":"/reference/getLOI-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LOI from a Storms object — getLOI","text":"sf object. Location Interest given StormsList object","code":""},{"path":"/reference/getLOI-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LOI from a Storms object — getLOI","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\")) loi <- getLOI(sts) }"},{"path":"/reference/getNames-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get name(s) of storm(s) — getNames","title":"Get name(s) of storm(s) — getNames","text":"Get name(s) storm(s) available Storm/StormsList object","code":""},{"path":"/reference/getNames-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get name(s) of storm(s) — getNames","text":"","code":"getNames(s)"},{"path":"/reference/getNames-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get name(s) of storm(s) — getNames","text":"s Storm/StormsList object","code":""},{"path":"/reference/getNames-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get name(s) of storm(s) — getNames","text":"character vector. Names storms provided given Storm/StormsList object","code":""},{"path":"/reference/getNames-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get name(s) of storm(s) — getNames","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  ## For storm Niran getNames(getStorm(sts, name = \"NIRAN\"))  ## For sts getNames(sts) }"},{"path":"/reference/getNbObs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of observations available — getNbObs","title":"Get the number of observations available — getNbObs","text":"Get number observations available given storm","code":""},{"path":"/reference/getNbObs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of observations available — getNbObs","text":"","code":"getNbObs(s, ...)"},{"path":"/reference/getNbObs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of observations available — getNbObs","text":"s Storm/StormsList object name character. Name storm extract capital letters season numeric. Cyclonic season storm extract. Used several storms StormsList object share name. Default value set NULL","code":""},{"path":"/reference/getNbObs-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of observations available — getNbObs","text":"numeric. Number observations available given storm","code":""},{"path":"/reference/getNbObs-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of observations available — getNbObs","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  ## For storm Niran getNbObs(getStorm(sts, name = \"NIRAN\"))  ## Equivalent to  getNbObs(sts, name = \"NIRAN\") }"},{"path":"/reference/getNbStorms-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of Storms in StormsList — getNbStorms","title":"Get number of Storms in StormsList — getNbStorms","text":"Get number Storm available StormsList object","code":""},{"path":"/reference/getNbStorms-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of Storms in StormsList — getNbStorms","text":"","code":"getNbStorms(sts)"},{"path":"/reference/getNbStorms-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of Storms in StormsList — getNbStorms","text":"sts StormsList object","code":""},{"path":"/reference/getNbStorms-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of Storms in StormsList — getNbStorms","text":"numeric. Number storms available given StormsList object","code":""},{"path":"/reference/getNbStorms-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of Storms in StormsList — getNbStorms","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\")) nb <- getNbStorms(sts) }"},{"path":"/reference/getObs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get observations available — getObs","title":"Get observations available — getObs","text":"Get observations available given storm","code":""},{"path":"/reference/getObs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get observations available — getObs","text":"","code":"getObs(s, ...)"},{"path":"/reference/getObs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get observations available — getObs","text":"s Storm/StormsList object name character. Name storm extract capital letters season numeric. Cyclonic season storm extract. Used several storms StormsList object share name. Default value set NULL","code":""},{"path":"/reference/getObs-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get observations available — getObs","text":"data.frame. Observations given storm","code":""},{"path":"/reference/getObs-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get observations available — getObs","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  ## For storm Niran getObs(getStorm(sts, name = \"NIRAN\"))  ## Equivalent to  getObs(sts, name = \"NIRAN\") }"},{"path":"/reference/getSSHS-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum SSHS reached of storm(s) — getSSHS","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"Get maximum Saffir Simpson Hurricane Scale (SSHS) reached storms available Storm/StormsList object","code":""},{"path":"/reference/getSSHS-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"","code":"getSSHS(s)"},{"path":"/reference/getSSHS-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"s Storm/StormsList object name character. Name storm capital letters. Default value set NULL","code":""},{"path":"/reference/getSSHS-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"numeric vector. Maximum SSHS reached storms (selected one name input) provided given StormsList object maximum SSHS reached given Storm object","code":""},{"path":"/reference/getSSHS-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  ## For storm Niran getSSHS(getStorm(sts, name = \"NIRAN\"))  ## For sts getSSHS(sts) }"},{"path":"/reference/getSeasons-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cyclonic seasons of storm(s) — getSeasons","title":"Get the cyclonic seasons of storm(s) — getSeasons","text":"Get cyclonic season storms available Storm/StormsList","code":""},{"path":"/reference/getSeasons-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cyclonic seasons of storm(s) — getSeasons","text":"","code":"getSeasons(s)"},{"path":"/reference/getSeasons-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cyclonic seasons of storm(s) — getSeasons","text":"s Storm/StormsList object","code":""},{"path":"/reference/getSeasons-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cyclonic seasons of storm(s) — getSeasons","text":"numeric vector. Cyclonic seasons storms (selected one name input) provided given StormsList object cyclonic season given Storm object","code":""},{"path":"/reference/getSeasons-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cyclonic seasons of storm(s) — getSeasons","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\"))  ## For storm Niran getSeasons(getStorm(sts, name = \"NIRAN\"))  ## For sts getSeasons(sts) }"},{"path":"/reference/getStorm-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a Storm — getStorm","title":"Extract a Storm — getStorm","text":"Extract Storm object StormsList object","code":""},{"path":"/reference/getStorm-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a Storm — getStorm","text":"","code":"getStorm(sts, name, season = NULL)"},{"path":"/reference/getStorm-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a Storm — getStorm","text":"sts StormsList object name character. Name storm extract season numeric. Cyclonic season storm extract. Used several storms StormsList object share name. Default value set de NULL","code":""},{"path":"/reference/getStorm-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a Storm — getStorm","text":"Storm object","code":""},{"path":"/reference/pam.html","id":null,"dir":"Reference","previous_headings":"","what":"PAM tropical cyclone — pam","title":"PAM tropical cyclone — pam","text":"Gathers informations category 5 TC PAM (2015) Vanuatu buffer 300km","code":""},{"path":"/reference/pam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PAM tropical cyclone — pam","text":"","code":"pam"},{"path":[]},{"path":"/reference/pam.html","id":"pam","dir":"Reference","previous_headings":"","what":"pam","title":"PAM tropical cyclone — pam","text":"StormsList object generated Storms","code":""},{"path":"/reference/plotBehaviour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rasterized information storm behaviour — plotBehaviour","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"function plots rasterized product (among maximum sustained wind, power dissipation index, category exposure, 2D wind speed structure/wind direction given observation) associated storm provided StormsList object alongside track","code":""},{"path":"/reference/plotBehaviour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"","code":"plotBehaviour(   sts,   raster_product,   color_palette = NULL,   xlim = NULL,   ylim = NULL,   labels = FALSE,   by = 8,   pos = 3 )"},{"path":"/reference/plotBehaviour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"sts StormsList object raster_product SpatRaster object. Name layer must \"STORMNAME_product\" product either: \"MSW\" \"PDI\" \"Exposure_threshold\" \"threshold\" represents wind threshold used compute Exposure raster \"Profiles_index\" index stands index observation \"WindDirection_index\" index stands index observation color_palette character vector. Represents color palette used plot. Default value set NULL, automatically choose color palette provided package depending product xlim numeric vector. set longitude coordinates controls longitude extent plot. Default value set NULL let plot extends according longitude range extended LOI ylim numeric vector. set latitude coordinates controls latitude extent plot. Default value set NULL let plot extends according longitude range extended LOI labels logical. Whether plot name labels corresponding indices observations ISO Times along track numeric. Defines frequency labels plotted 3 (6) hourly records. Default value set 8 represents 24h (48h) time interval labeled observations. Ignored labels == FALSE pos numeric. Must 1 4. Correspond position labels according observation: 1 (), 2 (left), 3 (), 4 (right). Default value set 3. Ignored labels == FALSE","code":""},{"path":"/reference/plotBehaviour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"","code":"if (FALSE) { #Plot MSW raster for Pam (2015) in Vanuatu pam <- Storms(loi = \"Vanuatu\", names = \"PAM\") pam_msw <- spatialBehaviour(pam, verbose = 0) plotBehaviour(pam, pam_msw)  #Plot a 2D windspeed structure  for Pam (2015) in Vanuatu pam <- Storms(loi = \"Vanuatu\", names = \"PAM\") pam_prof <- spatialBehaviour(pam, product = \"Profiles\", verbose = 0) plotBehaviour(pam, pam_prof[[\"PAM_Profiles_37\"]], labels = TRUE, pos = 2) }"},{"path":"/reference/plotStorms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot storm track(s) — plotStorms","title":"Plot storm track(s) — plotStorms","text":"function plots set storm tracks contained StormsList object (See “Storms” function). Depending inputs, user can choose plot desired set storms extracted StormsList object","code":""},{"path":"/reference/plotStorms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot storm track(s) — plotStorms","text":"","code":"plotStorms(   sts,   names = NULL,   category = NULL,   xlim = NULL,   ylim = NULL,   labels = FALSE,   by = 8,   pos = 3,   legends = TRUE,   loi = TRUE,   reset_setting = TRUE )"},{"path":"/reference/plotStorms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot storm track(s) — plotStorms","text":"sts StormsList object names character vector. Name(s) storm(s) capital letters plot map. Default value set NULL, plot every storm provided sts. see storms included StormsList object, can use getter \"getNames()\" category numeric vector. either category range categories Saffir Simpson scale (-1 5). Default value set NULL consider every storm sts. Otherwise consider storms reached category input xlim numeric vector. set longitude coordinates controls longitude extent plot. Default value set NULL let plot extends according longitude range extended LOI ylim numeric vector. set latitude coordinates controls latitude extent plot. Default value set NULL let plot extends according latitude range extended LOI labels logical. Whether plot names labels corresponding indices observations ISO Times along track(s) numeric. Defines frequency labels plotted 3 (6) hourly records. Default value set 8 represents 24h (48h) time interval labeled observations. Ignored labels == FALSE pos numeric. Must 1 4. Correspond position labels according observation: 1 (), 2 (left), 3 (), 4 (right). Default value set 3. Ignored labels == FALSE legends logical. Whether plot legends. Default value set TRUE loi logical. Whether plot extended LOI map. Default value set TRUE reset_setting logical. Whether graphical parameter reset exit. Default value set TRUE. useful plotBehaviour function. highly recommend change input","code":""},{"path":"/reference/plotStorms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot storm track(s) — plotStorms","text":"","code":"if (FALSE) { #Plot Erica over New Caledonia with labels every 24h plotStorms(sts_nc, names = \"ERICA\", labels = TRUE)  #Plot Erica, with labels every 6h on the right side of observations plotStorms(sts_nc, names = \"ERICA\", labels = TRUE, by = 2, pos = 4)  }"},{"path":"/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a Storm/StormsList — show,Storm-method","title":"Show a Storm/StormsList — show,Storm-method","text":"Display Storm/StormsList object","code":""},{"path":"/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a Storm/StormsList — show,Storm-method","text":"","code":"# S4 method for Storm show(object)  # S4 method for StormsList show(object)"},{"path":"/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a Storm/StormsList — show,Storm-method","text":"object Storm/StormList object","code":""},{"path":"/reference/show-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a Storm/StormsList — show,Storm-method","text":"","code":"sts <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\",\"NIRAN\")) #> === Storms processing ... === #>  #> -> Making buffer: Done #> -> Searching for ERICA NIRAN storms ... #>    -> Identifying Storms: Done #> -> Gathering storm(s) ...  #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% #>  #> === DONE with run time 0.5481884 sec === #>  #> SUMMARY: #> (*) LOI: New Caledonia  #> (*) Buffer size: 300 km #> (*) Remove Tropical Depressions (< 18 m/s in sshs): yes #> (*) Number of Storms: 2  #>         Name - Tropical season - SSHS - Number of observation within buffer: #>         ERICA - 2003 - 4 - 19  #>         NIRAN - 2021 - 5 - 10  #>  ## Display information about Niran in sts  getStorm(sts, name = \"NIRAN\") #> Name: NIRAN  #> Season: 2021  #> Maximum category reached (SSHS): 5  #> Indices of observations within buffer: 36 37 38 39 40 41 42 43 44 45  #> Observations: #>               iso.time      lon       lat msw sshs rmw pres poci #> 1  2021-03-01 00:00:00 147.2000 -17.20000  18    0  74  996 1004 #> 2  2021-03-01 03:00:00 146.9599 -16.95511  18    0  74  995 1002 #> 3  2021-03-01 06:00:00 146.8000 -16.70000  18    0  74  994 1000 #> 4  2021-03-01 09:00:00 146.7825 -16.42242  19    0  69  994 1001 #> 5  2021-03-01 12:00:00 146.9000 -16.10000  20    0  65  994 1002 #> 6  2021-03-01 15:00:00 147.1277 -15.69257  22    0  50  989 1002 #> 7  2021-03-01 18:00:00 147.4000 -15.30000  23    0  37  984 1002 #> 8  2021-03-01 21:00:00 147.6225 -14.99000  23    0  50  988 1002 #> 9  2021-03-02 00:00:00 147.8000 -14.80000  23    0  65  993 1003 #> 10 2021-03-02 03:00:00 147.9149 -14.76247  25    0  56  991 1003 #> 11 2021-03-02 06:00:00 148.0000 -14.80000  26    0  46  990 1003 #> 12 2021-03-02 09:00:00 148.0850 -14.79247  27    0  50  988 1003 #> 13 2021-03-02 12:00:00 148.2000 -14.80000  28    0  56  986 1004 #> 14 2021-03-02 15:00:00 148.4412 -14.85238  28    0  56  985 1002 #> 15 2021-03-02 18:00:00 148.6000 -14.90000  28    0  56  984 1001 #> 16 2021-03-02 21:00:00 148.4812 -14.89725  30    0  56  980 1002 #> 17 2021-03-03 00:00:00 148.2499 -14.86911  32    0  56  977 1004 #> 18 2021-03-03 03:00:00 148.0187 -14.83226  34    1  46  973 1004 #> 19 2021-03-03 06:00:00 147.9000 -14.80000  36    1  37  970 1004 #> 20 2021-03-03 09:00:00 148.0738 -14.76490  36    1  37  970 1004 #> 21 2021-03-03 12:00:00 148.3000 -14.80000  36    1  37  970 1005 #> 22 2021-03-03 15:00:00 148.3001 -14.99995  37    1  30  970 1003 #> 23 2021-03-03 18:00:00 148.3000 -15.20000  38    1  22  970 1001 #> 24 2021-03-03 21:00:00 148.4401 -15.20742  41    1  24  966 1001 #> 25 2021-03-04 00:00:00 148.7000 -15.20000  43    2  26  962 1001 #> 26 2021-03-04 03:00:00 149.0622 -15.35752  44    2  24  960 1000 #> 27 2021-03-04 06:00:00 149.5000 -15.50000  46    2  22  958 1000 #> 28 2021-03-04 09:00:00 149.8532 -15.43415  44    2  22  961 1001 #> 29 2021-03-04 12:00:00 150.4000 -15.40000  43    2  22  964 1002 #> 30 2021-03-04 15:00:00 151.3895 -15.60594  45    2  22  961 1002 #> 31 2021-03-04 18:00:00 152.5000 -15.90000  48    2  22  958 1002 #> 32 2021-03-04 21:00:00 153.3144 -16.08086  52    3  22  951 1002 #> 33 2021-03-05 00:00:00 154.2000 -16.40000  56    3  22  944 1002 #> 34 2021-03-05 03:00:00 155.4535 -17.06325  58    3  15  942 1000 #> 35 2021-03-05 06:00:00 156.8000 -17.80000  59    4   9  940  999 #> 36 2021-03-05 09:00:00 157.9741 -18.32137  65    4   9  928 1000 #> 37 2021-03-05 12:00:00 159.1000 -18.80000  71    5   9  917 1001 #> 38 2021-03-05 15:00:00 160.2510 -19.32679  68    4   9  921 1000 #> 39 2021-03-05 18:00:00 161.4000 -19.90000  66    4   9  925  999 #> 40 2021-03-05 21:00:00 162.5068 -20.51831  58    4   9  939  999 #> 41 2021-03-06 00:00:00 163.7000 -21.20000  51    3   9  953  999 #> 42 2021-03-06 03:00:00 165.1059 -21.92737  51    3   9  952  999 #> 43 2021-03-06 06:00:00 166.6000 -22.70000  51    3   9  952 1000 #> 44 2021-03-06 09:00:00 167.9737 -23.42875  48    2   9  955 1000 #> 45 2021-03-06 12:00:00 169.5000 -24.30000  46    2   9  959 1000 #> 46 2021-03-06 15:00:00 171.5424 -25.57994  39    1   9  968 1001 #> 47 2021-03-06 18:00:00 173.5000 -26.70000  33    1   9  977 1002 #> 48 2021-03-06 21:00:00 174.6781 -27.05317  29    0  59  984 1002 #> 49 2021-03-07 00:00:00 175.7000 -27.30000  26    0 111  991 1003 #> 50 2021-03-07 03:00:00 177.1815 -28.01794  26    0 111  988 1003 #> 51 2021-03-07 06:00:00 178.8000 -28.90000  26    0 111  985 1003 #> 52 2021-03-07 09:00:00 180.3689 -29.76719  24    0 111  986 1003 #> 53 2021-03-07 12:00:00 181.9000 -30.60000  23    0 111  987 1003  ## Display information about sts  sts #> ***** StormList ***** #>  #> Number of Storms: 2  #> Storms availables: #>  #> * 1  #> Name: ERICA  #> Season: 2003  #> Maximum category reached (SSHS): 4  #> Indices of observations within buffer: 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  #> Observations: #>               iso.time      lon       lat msw sshs rmw pres poci #> 1  2003-03-04 00:00:00 152.4000 -20.10000  10   -1  93 1004 1004 #> 2  2003-03-04 03:00:00 152.7226 -20.44497  11   -1  93 1003 1004 #> 3  2003-03-04 06:00:00 153.1000 -20.80000  13   -1  93 1002 1004 #> 4  2003-03-04 09:00:00 153.5571 -21.14014  14   -1 120 1001 1003 #> 5  2003-03-04 12:00:00 154.0000 -21.30000  15   -1 148 1000 1003 #> 6  2003-03-04 15:00:00 154.3380 -21.12487  15   -1 148 1000 1004 #> 7  2003-03-04 18:00:00 154.6000 -20.80000  15   -1 148 1000 1006 #> 8  2003-03-04 21:00:00 154.8375 -20.55747  15   -1 148 1000 1006 #> 9  2003-03-05 00:00:00 155.0000 -20.30000  15   -1 148 1000 1006 #> 10 2003-03-05 03:00:00 155.0648 -20.01495  16   -1 111  998 1005 #> 11 2003-03-05 06:00:00 155.1000 -19.70000  18    0  74  997 1004 #> 12 2003-03-05 09:00:00 155.2303 -19.35751  18    0  74  997 1004 #> 13 2003-03-05 12:00:00 155.3000 -19.00000  18    0  74  997 1004 #> 14 2003-03-05 15:00:00 155.2100 -18.64994  18    0  78  997 1004 #> 15 2003-03-05 18:00:00 155.0000 -18.30000  18    0  83  997 1004 #> 16 2003-03-05 21:00:00 154.7150 -17.95757  16   -1  87  998 1004 #> 17 2003-03-06 00:00:00 154.4000 -17.60000  15   -1  93 1000 1004 #> 18 2003-03-06 03:00:00 154.1124 -17.19252  15   -1  93 1000 1004 #> 19 2003-03-06 06:00:00 153.9000 -16.80000  15   -1  93 1000 1004 #> 20 2003-03-06 09:00:00 153.8127 -16.48495  15   -1  93 1000 1004 #> 21 2003-03-06 12:00:00 153.8000 -16.20000  15   -1  93 1000 1004 #> 22 2003-03-06 15:00:00 153.8001 -15.90000  15   -1  93 1000 1004 #> 23 2003-03-06 18:00:00 153.8000 -15.60000  15   -1  93 1000 1004 #> 24 2003-03-06 21:00:00 153.7575 -15.30000  15   -1  93 1000 1004 #> 25 2003-03-07 00:00:00 153.7000 -15.00000  15   -1  93 1000 1004 #> 26 2003-03-07 03:00:00 153.6500 -14.70000  14   -1  93 1001 1004 #> 27 2003-03-07 06:00:00 153.6000 -14.40000  13   -1  93 1002 1004 #> 28 2003-03-07 09:00:00 153.5725 -14.04747  13   -1  93 1002 1004 #> 29 2003-03-07 12:00:00 153.5000 -13.80000  13   -1  93 1002 1004 #> 30 2003-03-07 15:00:00 153.2476 -13.79755  13   -1  93 1002 1004 #> 31 2003-03-07 18:00:00 153.1000 -13.90000  13   -1  93 1002 1004 #> 32 2003-03-07 21:00:00 153.3398 -13.98763  13   -1  93 1002 1004 #> 33 2003-03-08 00:00:00 153.7000 -14.00000  13   -1  93 1002 1004 #> 34 2003-03-08 03:00:00 153.9301 -13.85997  13   -1  93 1002 1004 #> 35 2003-03-08 06:00:00 154.1000 -13.60000  13   -1  93 1002 1004 #> 36 2003-03-08 09:00:00 154.1999 -13.25745  13   -1  93 1002 1004 #> 37 2003-03-08 12:00:00 154.3000 -12.90000  13   -1  93 1002 1004 #> 38 2003-03-08 15:00:00 154.4700 -12.60497  13   -1  93 1002 1004 #> 39 2003-03-08 18:00:00 154.7000 -12.40000  13   -1  93 1002 1004 #> 40 2003-03-08 21:00:00 155.0975 -12.31256  13   -1  93 1002 1003 #> 41 2003-03-09 00:00:00 155.3000 -12.30000  13   -1  93 1002 1003 #> 42 2003-03-09 03:00:00 154.8050 -12.28534  13   -1  93 1002 1003 #> 43 2003-03-09 06:00:00 154.4000 -12.30000  13   -1  93 1002 1003 #> 44 2003-03-09 09:00:00 154.8649 -12.35040  13   -1  93 1002 1003 #> 45 2003-03-09 12:00:00 155.6000 -12.40000  13   -1  93 1002 1003 #> 46 2003-03-09 15:00:00 156.0800 -12.41483  13   -1  93 1002 1003 #> 47 2003-03-09 18:00:00 156.5000 -12.40000  13   -1  93 1002 1003 #> 48 2003-03-09 21:00:00 156.9300 -12.36499  13   -1  93 1002 1003 #> 49 2003-03-10 00:00:00 157.3000 -12.30000  13   -1  93 1002 1004 #> 50 2003-03-10 03:00:00 157.5726 -12.18490  14   -1  93 1001 1004 #> 51 2003-03-10 06:00:00 157.8000 -12.10000  15   -1  93 1000 1004 #> 52 2003-03-10 09:00:00 158.0949 -12.09755  16   -1  93  998 1004 #> 53 2003-03-10 12:00:00 158.3000 -12.20000  18    0  93  997 1004 #> 54 2003-03-10 15:00:00 158.2652 -12.43497  18    0  93  997 1004 #> 55 2003-03-10 18:00:00 158.2000 -12.70000  18    0  93  997 1004 #> 56 2003-03-10 21:00:00 158.3125 -12.85750  19    0  83  995 1004 #> 57 2003-03-11 00:00:00 158.5000 -13.00000  21    0  74  994 1004 #> 58 2003-03-11 03:00:00 158.6926 -13.16250  22    0  74  994 1004 #> 59 2003-03-11 06:00:00 158.9000 -13.40000  23    0  74  994 1004 #> 60 2003-03-11 09:00:00 159.1075 -13.75501  24    0  74  990 1004 #> 61 2003-03-11 12:00:00 159.3000 -14.20000  26    0  74  987 1004 #> 62 2003-03-11 15:00:00 159.4725 -14.68500  27    0  69  985 1004 #> 63 2003-03-11 18:00:00 159.6000 -15.20000  28    0  65  984 1004 #> 64 2003-03-11 21:00:00 159.6577 -15.70747  31    0  50  980 1004 #> 65 2003-03-12 00:00:00 159.7000 -16.20000  33    1  37  976 1004 #> 66 2003-03-12 03:00:00 159.7701 -16.66495  33    1  37  976 1004 #> 67 2003-03-12 06:00:00 159.9000 -17.10000  33    1  37  976 1004 #> 68 2003-03-12 09:00:00 160.1350 -17.50006  40    1  31  965 1004 #> 69 2003-03-12 12:00:00 160.4000 -17.90000  46    2  28  954 1004 #> 70 2003-03-12 15:00:00 160.6002 -18.34993  52    3  46  940 1003 #> 71 2003-03-12 18:00:00 160.8000 -18.80000  59    4  65  927 1002 #> 72 2003-03-12 21:00:00 161.0276 -19.22242  63    4  65  918 1003 #> 73 2003-03-13 00:00:00 161.3000 -19.60000  67    4  65  910 1004 #> 74 2003-03-13 03:00:00 161.6202 -19.92241  67    4  46  910 1003 #> 75 2003-03-13 06:00:00 162.0000 -20.20000  67    4  28  910 1002 #> 76 2003-03-13 09:00:00 162.4052 -20.46472  67    4  28  910 1002 #> 77 2003-03-13 12:00:00 162.9000 -20.70000  67    4  28  910 1002 #> 78 2003-03-13 15:00:00 163.4762 -20.86197  65    4  28  913 1002 #> 79 2003-03-13 18:00:00 164.2000 -21.10000  64    4  28  916 1003 #> 80 2003-03-13 21:00:00 165.0528 -21.55415  58    3  31  930 1003 #> 81 2003-03-14 00:00:00 166.1000 -22.10000  51    3  37  944 1003 #> 82 2003-03-14 03:00:00 167.3637 -22.57048  49    2  31  949 1003 #> 83 2003-03-14 06:00:00 168.7000 -23.10000  46    2  28  954 1003 #> 84 2003-03-14 09:00:00 169.9157 -23.76874  44    2  28  958 1003 #> 85 2003-03-14 12:00:00 171.1000 -24.50000  41    1  28  963 1003 #> 86 2003-03-14 15:00:00 172.2872 -25.18368  39    1  31  967 1003 #> 87 2003-03-14 18:00:00 173.5000 -25.90000  36    1  37  972 1003 #> 88 2003-03-14 21:00:00 174.7633 -26.70609  33    1  46  976 1003 #> 89 2003-03-15 00:00:00 176.1000 -27.50000  31    0  56  980 1003 #> 90 2003-03-15 03:00:00 177.5222 -28.18837  23    0  69  990 1003 #> 91 2003-03-15 06:00:00 179.0000 -28.80000  15   -1  83 1000 1003 #>  #> * 2  #> Name: NIRAN  #> Season: 2021  #> Maximum category reached (SSHS): 5  #> Indices of observations within buffer: 36 37 38 39 40 41 42 43 44 45  #> Observations: #>               iso.time      lon       lat msw sshs rmw pres poci #> 1  2021-03-01 00:00:00 147.2000 -17.20000  18    0  74  996 1004 #> 2  2021-03-01 03:00:00 146.9599 -16.95511  18    0  74  995 1002 #> 3  2021-03-01 06:00:00 146.8000 -16.70000  18    0  74  994 1000 #> 4  2021-03-01 09:00:00 146.7825 -16.42242  19    0  69  994 1001 #> 5  2021-03-01 12:00:00 146.9000 -16.10000  20    0  65  994 1002 #> 6  2021-03-01 15:00:00 147.1277 -15.69257  22    0  50  989 1002 #> 7  2021-03-01 18:00:00 147.4000 -15.30000  23    0  37  984 1002 #> 8  2021-03-01 21:00:00 147.6225 -14.99000  23    0  50  988 1002 #> 9  2021-03-02 00:00:00 147.8000 -14.80000  23    0  65  993 1003 #> 10 2021-03-02 03:00:00 147.9149 -14.76247  25    0  56  991 1003 #> 11 2021-03-02 06:00:00 148.0000 -14.80000  26    0  46  990 1003 #> 12 2021-03-02 09:00:00 148.0850 -14.79247  27    0  50  988 1003 #> 13 2021-03-02 12:00:00 148.2000 -14.80000  28    0  56  986 1004 #> 14 2021-03-02 15:00:00 148.4412 -14.85238  28    0  56  985 1002 #> 15 2021-03-02 18:00:00 148.6000 -14.90000  28    0  56  984 1001 #> 16 2021-03-02 21:00:00 148.4812 -14.89725  30    0  56  980 1002 #> 17 2021-03-03 00:00:00 148.2499 -14.86911  32    0  56  977 1004 #> 18 2021-03-03 03:00:00 148.0187 -14.83226  34    1  46  973 1004 #> 19 2021-03-03 06:00:00 147.9000 -14.80000  36    1  37  970 1004 #> 20 2021-03-03 09:00:00 148.0738 -14.76490  36    1  37  970 1004 #> 21 2021-03-03 12:00:00 148.3000 -14.80000  36    1  37  970 1005 #> 22 2021-03-03 15:00:00 148.3001 -14.99995  37    1  30  970 1003 #> 23 2021-03-03 18:00:00 148.3000 -15.20000  38    1  22  970 1001 #> 24 2021-03-03 21:00:00 148.4401 -15.20742  41    1  24  966 1001 #> 25 2021-03-04 00:00:00 148.7000 -15.20000  43    2  26  962 1001 #> 26 2021-03-04 03:00:00 149.0622 -15.35752  44    2  24  960 1000 #> 27 2021-03-04 06:00:00 149.5000 -15.50000  46    2  22  958 1000 #> 28 2021-03-04 09:00:00 149.8532 -15.43415  44    2  22  961 1001 #> 29 2021-03-04 12:00:00 150.4000 -15.40000  43    2  22  964 1002 #> 30 2021-03-04 15:00:00 151.3895 -15.60594  45    2  22  961 1002 #> 31 2021-03-04 18:00:00 152.5000 -15.90000  48    2  22  958 1002 #> 32 2021-03-04 21:00:00 153.3144 -16.08086  52    3  22  951 1002 #> 33 2021-03-05 00:00:00 154.2000 -16.40000  56    3  22  944 1002 #> 34 2021-03-05 03:00:00 155.4535 -17.06325  58    3  15  942 1000 #> 35 2021-03-05 06:00:00 156.8000 -17.80000  59    4   9  940  999 #> 36 2021-03-05 09:00:00 157.9741 -18.32137  65    4   9  928 1000 #> 37 2021-03-05 12:00:00 159.1000 -18.80000  71    5   9  917 1001 #> 38 2021-03-05 15:00:00 160.2510 -19.32679  68    4   9  921 1000 #> 39 2021-03-05 18:00:00 161.4000 -19.90000  66    4   9  925  999 #> 40 2021-03-05 21:00:00 162.5068 -20.51831  58    4   9  939  999 #> 41 2021-03-06 00:00:00 163.7000 -21.20000  51    3   9  953  999 #> 42 2021-03-06 03:00:00 165.1059 -21.92737  51    3   9  952  999 #> 43 2021-03-06 06:00:00 166.6000 -22.70000  51    3   9  952 1000 #> 44 2021-03-06 09:00:00 167.9737 -23.42875  48    2   9  955 1000 #> 45 2021-03-06 12:00:00 169.5000 -24.30000  46    2   9  959 1000 #> 46 2021-03-06 15:00:00 171.5424 -25.57994  39    1   9  968 1001 #> 47 2021-03-06 18:00:00 173.5000 -26.70000  33    1   9  977 1002 #> 48 2021-03-06 21:00:00 174.6781 -27.05317  29    0  59  984 1002 #> 49 2021-03-07 00:00:00 175.7000 -27.30000  26    0 111  991 1003 #> 50 2021-03-07 03:00:00 177.1815 -28.01794  26    0 111  988 1003 #> 51 2021-03-07 06:00:00 178.8000 -28.90000  26    0 111  985 1003 #> 52 2021-03-07 09:00:00 180.3689 -29.76719  24    0 111  986 1003 #> 53 2021-03-07 12:00:00 181.9000 -30.60000  23    0 111  987 1003 #>  #>  #> ***** End StormList *****"},{"path":"/reference/spatialBehaviour.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute indicators of storm behaviour — spatialBehaviour","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"function computes/rasterizes analytic products storm StormsList object, including Maximum Sustained Wind, Power Dissipation Index, Category exposure 2D wind speed structures/direction wind speed every observations","code":""},{"path":"/reference/spatialBehaviour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"","code":"spatialBehaviour(   sts,   product = \"MSW\",   wind_threshold = c(18, 33, 42, 49, 58, 70),   method = \"Willoughby\",   asymmetry = \"Chen\",   empirical_rmw = FALSE,   space_res = \"2.5min\",   time_res = 1,   verbose = 2 )"},{"path":"/reference/spatialBehaviour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"sts StormsList object product character. Product compute among: \"MSW\": Maximum Sustained Wind \"PDI\": Power Dissipation Index \"Exposure\": hour exposition wind greater wind_threshold input \"Profiles\", 2D wind speed structures wind speed wind direction observation Default value set \"MSW\" wind_threshold numeric vector. Minimal wind threshold(s) (m/s) compute Exposure product. Ignored Exposure part products compute. Default value set Saffir Simpson Hurricane Scale thresholds method character. Cyclonic model used compute product. Must either: \"Willoughby\": model based fits performed cyclonic observations \"Holland\": model based basic cyclonic Physics parameters fitting according cyclonic observations \"Boose\": asymmetric model based Holland model Default value set \"Willoughby\" (See Details) asymmetry character. Indicates version asymmetry use computations. Must either: \"Miyazaki\": ... \"Chen\": ... \"None\": asymmetry added Default value set \"Chen\" (See Details) empirical_rmw logical. Whether compute radius maximum wind empirically using radius maximum wind observations. Default value set FALSE. TRUE, formula extracted Willoughby et al. 2006 used compute rmw space_res character. Space resolution raster(s) compute. Either 30sec, 2.5min, 5min 10min. Default value set 2.5min time_res numeric. Period time used interpolate data. Allowed values 1 (60min), 0.75 (45min), 0.5 (30min), 0.25 (15min). Default value set 1 verbose numeric. Whether function display informations process /outputs additional notes. Allowed values : 0: Nothing displayed 1: Informations process displayed 2: Outputs also displayed 3: Additional notes also displayed Default value set 2","code":""},{"path":"/reference/spatialBehaviour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"SpatRaster stack provides desired product computed, projected WGS84 spanning extented LOI StormsList object. Number layers depends number storm available sts input also product time_res inputs: \"MSW\" produces one layer per storm. Name layer \"STORMNAME_MSW\" \"PDI\" produces one layer per storm. Name layer \"STORMNAME_PDI\" \"Exposure\" produces one layer wind values available wind_threshold input storm. Name layers \"STORMNAME_Exposure_threshold1\", \"STORMNAME_Exposure_threshold2\"... \"Profiles\" produces two layers observations (real interpolated) storm. Name layers \"STORMNAME_Profile_observation\", \"STORMNAME_WindDirection_observation\"","code":""},{"path":"/reference/spatialBehaviour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"Add details Willoughy/Holland/Boose method, asymmetries getRMW method ...","code":""},{"path":"/reference/spatialBehaviour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"","code":"if (FALSE) { #Compute MSW product for Pam 2015 in Vanuatu using default settings msw.pam <- spatialBehaviour(pam)  #Compute PDI product for Erica and Niran in New Caledonia using Holland model without asymmetry pdi.nc <- spatialBehaviour(sts_nc, method = \"Holland\", product = \"PDI\", asymmetry = \"None\")  #Compute Exposure for Pam 2015 in Vanuatu using default settings exp.pam <- spatialBehaviour(pam, product = \"Exposure\")  #Compute profiles wind speed for Erica and Niran in New Caledonia using default settings prof.nc <- spatialBehaviour(sts_nc, product = \"Profiles\") }"},{"path":"/reference/stormBehaviour_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute indicators of storm behaviour — stormBehaviour_pt","title":"Compute indicators of storm behaviour — stormBehaviour_pt","text":"function pointwise version spatialBehaviour. Available products Time Series wind speed (TS), Power Dissipation Index (PDI) Exposure","code":""},{"path":"/reference/stormBehaviour_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute indicators of storm behaviour — stormBehaviour_pt","text":"","code":"stormBehaviour_pt(   sts,   points,   product = \"TS\",   wind_threshold = c(18, 33, 42, 49, 58, 70),   method = \"Willoughby\",   asymmetry = \"Chen\",   empirical_rmw = FALSE,   time_res = 1 )"},{"path":"/reference/stormBehaviour_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute indicators of storm behaviour — stormBehaviour_pt","text":"sts StormsList object points data.frame. Contains longitude/latitude coordinates within column names \"lon\" \"lat\", compute desired product product character. Product compute. Must either: \"TS\": Time Series wind speed \"PDI\": Power Dissipation Index \"Exposure\": hour exposition wind greater wind_threshold input Default value set \"TS\" wind_threshold numeric vector. Minimal wind threshold(s) (m/s) compute Exposure product. Ignored Exposure part products compute. Default value set Saffir Simpson Hurricane Scale thresholds method character. Cyclonic model used compute product. Must either: \"Willoughby\": model based fits performed cyclonic observations \"Holland\": model based basic cyclonic Physics parameters fitting according cyclonic observations \"Boose\": asymmetric model based Holland model Default value set \"Willoughby\" (See Details) asymmetry character. Indicates version asymmetry use computations. Must either: \"Miyazaki\": ... \"Chen\": ... \"None\": asymmetry added Default value set \"Chen\" (See Details) empirical_rmw logical. Whether compute radius maximum wind empirically using radius maximum wind observations. Default value set FALSE. TRUE, formula extracted Willoughby et al. 2006 used compute rmw time_res numeric. Period time used interpolate data. Allowed values 1 (60min), 0.75 (45min), 0.5 (30min), 0.25 (15min). Default value set 1","code":""},{"path":"/reference/stormBehaviour_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute indicators of storm behaviour — stormBehaviour_pt","text":"Computed product points returned data.frames contained named list. slot, named storm, data.frame following dimensions: product == \"TS\": data frame whose number rows corresponds number interpolated observations. columns provides respectively wind speed values (m/s), wind directions (degree), indices ISO time observation product == \"PDI\": data.frame one row one column contains PDI value point points. product == \"Exposure\": data.frame one row wind threshold one column contains Exposure value point points.","code":""},{"path":"/reference/stormBehaviour_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute indicators of storm behaviour — stormBehaviour_pt","text":"","code":"if (FALSE) { pts <- data.frame(lon = c(166.5, 163), lat = c(-22, -19))  #Compute time series of wind speed for ERICA and NIRAN on points #provided in pts using default settings ts_nc <- stormBehaviour_pt(sts_nc, points = pts)  #Compute PDI for ERICA and NIRAN on points provided in pts using default settings pdiPt_nc <- stormBehaviour_pt(sts_nc, points = pts, product = \"PDI\")  #Compute Exposure for ERICA and NIRAN on points provided in df using default settings expPt_nc <- stormBehaviour_pt(sts_nc, points = pts, product = \"Exposure\", wind_threshold = c(20,30)) }"},{"path":"/reference/sts_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"ERICA and NIRAN tropical cyclones — sts_nc","title":"ERICA and NIRAN tropical cyclones — sts_nc","text":"Gathers informations category 4 5 TC ERICA (2003) NIRAN (2021) New Caledonia buffer 300km","code":""},{"path":"/reference/sts_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ERICA and NIRAN tropical cyclones — sts_nc","text":"","code":"sts_nc"},{"path":[]},{"path":"/reference/sts_nc.html","id":"sts-nc","dir":"Reference","previous_headings":"","what":"sts_nc","title":"ERICA and NIRAN tropical cyclones — sts_nc","text":"StormsList object generated Storms","code":""},{"path":"/reference/writeRast.html","id":null,"dir":"Reference","previous_headings":"","what":"Save raster(s) in the desired format — writeRast","title":"Save raster(s) in the desired format — writeRast","text":"function writes SpatRaster(s) given format among Geotiff netcdf","code":""},{"path":"/reference/writeRast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save raster(s) in the desired format — writeRast","text":"","code":"writeRast(rast, format = \".tiff\", filename = NULL, path = \"./\")"},{"path":"/reference/writeRast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save raster(s) in the desired format — writeRast","text":"rast SpatRaster object format character. Format file export. Either \".tiff\" \".nc\". Default value set \".tiff\" filename character. Name file. Default value set NULL, case set names(rast) path character. Relative path file written","code":""},{"path":"/reference/writeRast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save raster(s) in the desired format — writeRast","text":"","code":"if (FALSE) { #Save MSW raster in Geotiff file for Pam 2015 over Vanuatu pam <- Storms(loi = \"Vanuatu\", names = \"PAM\") pam.msw <- spatialBehaviour(pam) writeRast(pam.msw, path = paste0(tempdir(),\"/\"))  #Save PDI rasters in Geotiff files for Erica 2003 and Niran 2021 over #New Caledonia sts.nc <- Storms(loi = \"New Caledonia\", names = c(\"ERICA\", \"NIRAN\")) pdi.nc <- spatialBehaviour(sts.nc, product = \"PDI\") writeRast(pdi.nc, path = paste0(tempdir(),\"/\")) }"},{"path":"/news/index.html","id":"stormr-001","dir":"Changelog","previous_headings":"","what":"StormR 0.0.1","title":"StormR 0.0.1","text":"First implementation StormR package","code":""}]
