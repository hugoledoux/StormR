[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Baptiste Delaporte. Author, maintainer. Thomas Ibanez. Author. Gunnar Keppel. Author. Swen Jullien. Author. Christophe Menkes. Author. Thomas Arsouze. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delaporte B, Ibanez T, Keppel G, Jullien S, Menkes C, Arsouze T (2023). StormR: R Package Compute Behaviour Regime Winds Generated Tropical Storms. R package version 0.1.0.","code":"@Manual{,   title = {StormR: A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms},   author = {Baptiste Delaporte and Thomas Ibanez and Gunnar Keppel and Swen Jullien and Christophe Menkes and Thomas Arsouze},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"StormR R package allowing easily extract storm track data given locations areas interests, generate wind speed direction fields, compute summary statistics characterising behaviour winds generated tropical storms cyclones: maximum sustained wind speed, power dissipation index, duration exposure winds reaching defined speed thresholds.","code":""},{"path":[]},{"path":"/index.html","id":"installing-stormr","dir":"","previous_headings":"Usage","what":"Installing StormR","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"development version can installed GitHub follows,","code":"#install.packages(\"devtools\") devtools::install_github(\"umr-amap/StormR\")"},{"path":"/index.html","id":"loading-stormr-package","dir":"","previous_headings":"Usage","what":"Loading StormR package","title":"A R Package To Compute The Behaviour And Regime Of Winds Generated By Tropical Storms","text":"","code":"library(StormR)"},{"path":[]},{"path":"/reference/Storm-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Storm  object — Storm-class","title":"Storm  object — Storm-class","text":"Gather needed informations model single storm","code":""},{"path":"/reference/Storm-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Storm  object — Storm-class","text":"name character. Name storm season numeric. Cyclonic season storm occured sshs numeric. Maximum category reached Saffir Simpson Hurricane Scale obs numeric vector. Indices observations within location interest extented corresponding buffer (See StormsList class) obs.data.frame. Contains observations available. observation made several fields : iso.time, Date hours observations (UTC) lon, Longitude coordinate (Eastern degree) lat, Latitude coordinate (Northern degree) msw, Maximum Sustained Wind (m/s) sshs, Category Saffir Simpson Hurricane Scale following field mandatory highly recommended rmw, Radius Maximum Wind (km) Also, following fields mandatory perform Holland Boose models (See Details) pres, Pressure center (pa) poci, Pressure Outermost Closed Isobar (pa)","code":""},{"path":"/reference/Storms.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a StormsList object — Storms","title":"Creating a StormsList object — Storms","text":"Storms() function extracts storm track data StormsDataset creates StormsList object.","code":""},{"path":"/reference/Storms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a StormsList object — Storms","text":"","code":"Storms(   sds = test_dataset,   loi,   seasons = c(sds@seasons[\"min\"], sds@seasons[\"max\"]),   names = NULL,   max_dist = 300,   remove_TD = TRUE,   verbose = 2 )"},{"path":"/reference/Storms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a StormsList object — Storms","text":"sds StormsDataset object. default test_dataset object used loi Location interest. Can defined using: country name (character object, e.g., \"Vanuatu\"). point coordinate (numeric vector lon, lat decimal degrees, e.g., c(169.5, -19.2)). sp (SpatialPolygon) sf (simple features) object (e.g., created shapefile). seasons Season(s) occurrence storms. numeric vector one (e.g., 2020) two years (e.g., c(2020,2022)) extract storms occurring one specific season several consecutive seasons, respectively. default storms occurring since 1980 extracted. names Names specific storms (capital letters, character vector) extract. max_dist Maximum distance location interest storm track data extracted (numeric). Default max_dist set 300 km. remove_TD Whether (TRUE) (FALSE) removing tropical depressions (msw < 18 m/s). Default value set TRUE. verbose Type information function displays (numeric): 0: Nothing displayed. 1: information processes displayed. 2: Information processes outputs displayed (default value).","code":""},{"path":"/reference/Storms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a StormsList object — Storms","text":"Storms() function StormsList object containing track data storms meeting specified criteria (name, season, location, ...).","code":""},{"path":"/reference/Storms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating a StormsList object — Storms","text":"available countries loi provided rwolrdxtra package. package provide high resolution vector country boundaries derived Natural Earth data. informations Natural Earth data : http://www.naturalearthdata.com/downloads/10m-cultural-vectors/.","code":""},{"path":"/reference/Storms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a StormsList object — Storms","text":"","code":"if (FALSE) { #Getting data using country names vanuatu.st <- Storms(loi = \"Vanuatu\")  #Getting data using a specific point location pt <- c(169, -19) pam.pt <- Storms(loi = pt, names = \"PAM\")  #Getting data using country and storm names  niran.nc <- Storms(loi = \"New Caledonia\", names = c(\"NIRAN\"))  #Getting data using a user defined spatial polygon poly <- cbind(c(135, 290, 290, 135, 135),c(-60, -60, 0, 0, -60)) sp <- sf::st_polygon(list(poly)) sp <- sf::st_sfc(sp, crs = 4326) sp <- sf::st_as_sf(sp) sts_sp <- Storms(loi = sp) }"},{"path":"/reference/StormsDataset-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StormsDataset — StormsDataset-class","title":"StormsDataset — StormsDataset-class","text":"Choose database use within package's functions","code":""},{"path":"/reference/StormsDataset-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"StormsDataset — StormsDataset-class","text":"fields input must provide least 6 mandatory fields (11) order benefit functionalities package: field names: dimension contains names storms netcdf database field seasons: dimension contains cyclonic seasons storms netcdf database field isoTime: dimension contains ISO times (3 6 hourly) observations storms database field lon: dimension contains longitude coordinates observations storms netcdf database field lat: dimension contains latitude coordinates observations storms netcdf database field msw: dimension contains maximum sustained wind speed observations storms netcdf database following fields optional highly recommended: field basin: dimension contains basin location storms netcdf database. Used filter storms netcdf database field rmw: dimension contains radius maximum wind speed observations storms netcdf database (See spatialBehaviour, temporalBehaviour) field sshs: dimension contains Saffir Simpson Hurricane Scale index observations storms netcdf database Finally following fields optional mandatory perform Holland model (See spatialBehaviour, temporalBehaviour) field pressure: dimension contains pressure eye observations storms netcdf database field poci: dimension contains Pressure Outermost Closed Isobar observations storms nectdf database Default value set according relevant dimensions IBTrACS databases: fields = c(basin = \"basin\", names = \"name\", seasons = \"season\", isoTime = \"iso_time\", lon = \"usa_lon\", lat = \"usa_lat\", msw = \"usa_wind\", rmw = \"usa_rmw\", pressure = \"usa_pres\", poci = \"usa_poci\", sshs = \"usa_sshs\")","code":""},{"path":"/reference/StormsDataset-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StormsDataset — StormsDataset-class","text":"filename character. Name database load. Must netcdf file fields named character vector. Dictionary provides name dimensions extract netcdf database (See Details) basin character. Basin name filter database within boundaries. must either \"NA\": North Atlantic \"SA\": South Atlantic \"EP\": Eastern North Pacific \"WP\": Western North Pacific \"SP\": South Pacific \"SI\": South India \"NI\": North India \"None\": particular basin seasons numeric vector. Range calendar years filter storms. cyclones formed one year dissipated following year, latter used database list 6 10 slots depending fields input. slot either 1D array dimension (number storms) names seasons fields, 2D array dimension (Maximum number observations:number storms), remaining fields isoTime, lon, lat, msw, rmw, pressure, poci, sshs","code":""},{"path":"/reference/StormsList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StormsList object — StormsList-class","title":"StormsList object — StormsList-class","text":"Gather needed informations model set storms","code":""},{"path":"/reference/StormsList-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StormsList object — StormsList-class","text":"data list Storm (See Storm class) buffer numeric. Buffer used extent spatial.loi (km) spatial.loi sf object. Represents location interest. Projection EPSG:4326 spatial.loi.buffer sf object. Buffer extension spatial.loi","code":""},{"path":"/reference/defDatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"The defDatabase() function creates a StormsDataset object from a NetCDF file — defDatabase","title":"The defDatabase() function creates a StormsDataset object from a NetCDF file — defDatabase","text":"defDatabase() function creates StormsDataset object NetCDF file","code":""},{"path":"/reference/defDatabase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The defDatabase() function creates a StormsDataset object from a NetCDF file — defDatabase","text":"","code":"defDatabase(   filename,   fields = c(names = \"name\", seasons = \"season\", isoTime = \"iso_time\", lon = \"usa_lon\",     lat = \"usa_lat\", msw = \"usa_wind\", sshs = \"usa_sshs\", rmw = \"usa_rmw\", pressure =     \"usa_pres\", poci = \"usa_poci\"),   basin = NULL,   seasons = c(1980, as.numeric(format(Sys.time(), \"%Y\"))),   unit_conversion = c(msw = \"knt_to_ms\", rmw = \"nm_to_km\", pressure = \"mb_to_pa\", poci =     \"mb_to_pa\"),   verbose = TRUE )"},{"path":"/reference/defDatabase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The defDatabase() function creates a StormsDataset object from a NetCDF file — defDatabase","text":"filename Name NetCDF (.nc) file (character) fields Named character vector providing correspondence fields output StormsDataset object variable names input NetCDF file. basin Name basin (character) storm track data extracted. default basin=NULL, meaning stars regardless basin originated extracted. Seven basins can used filter data set: \"NA\" North Atlantic basin \"SA\" South Atlantic basin \"EP\" Eastern North Pacific basin \"WP\" Western North Pacific basin \"SP\" South Pacific basin \"SI\" South India basin \"NI\" North India basin seasons Seasons occurrence storms (numeric vector, e.g., c(2020,2022)). default storms occurring since 1980 extracted. unit_conversion Required unit conversions (named character vector), msw provided $m.s^-1$, rmw $km$, pressure poci $Pa$. default unit_conversion=c(msw = \"knt_to_ms\", rmw = \"nm_to_km\", pressure = \"mb_to_pa\", poci = \"mb_to_pa\") meet conversion requirement importing NetCDF file IBTrACS database. argument mandatory even conversion needed. conversion needed use \"None\" corresponding fields. following unit conversions implemented: msw, \"knt_to_ms\" convert knot meter per second (default setting) \"kmh_to_ms\" convert kilometre per hour meter per second \"mph_to_ms\" convert miles per hour meter per second \"None\"conversion needed rmw, \"nm_to_ms\"convert nautical miles kilometre (default setting) \"None\"conversion needed pressure poci, \"mb_to_pa\" convert  millibar Pascal  (default setting) \"b_to_pa\" convert bar Pascal \"atm_to_pa\" convert  atmosphere Pascal \"psi_to_pa\" convert  psi Pascal \"None\"conversion needed verbose Whether (TRUE) (FALSE) function display information processes","code":""},{"path":"/reference/defDatabase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The defDatabase() function creates a StormsDataset object from a NetCDF file — defDatabase","text":"defDatabase() function returns StormsDataset object.","code":""},{"path":"/reference/eezNC.html","id":null,"dir":"Reference","previous_headings":"","what":"EEZ of New Caledonia — eezNC","title":"EEZ of New Caledonia — eezNC","text":"Provide geographic limits eez New Caledonia","code":""},{"path":"/reference/eezNC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EEZ of New Caledonia — eezNC","text":"","code":"eezNC"},{"path":[]},{"path":"/reference/eezNC.html","id":"eeznc","dir":"Reference","previous_headings":"","what":"eezNC","title":"EEZ of New Caledonia — eezNC","text":"sf object","code":""},{"path":"/reference/getBuffer-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the extended LOI from a StormsList — getBuffer","title":"Get the extended LOI from a StormsList — getBuffer","text":"Get extended Location Interest StormsList","code":""},{"path":"/reference/getBuffer-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the extended LOI from a StormsList — getBuffer","text":"","code":"getBuffer(sts)  # S4 method for StormsList getBuffer(sts)"},{"path":"/reference/getBuffer-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the extended LOI from a StormsList — getBuffer","text":"sts StormsList","code":""},{"path":"/reference/getBuffer-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the extended LOI from a StormsList — getBuffer","text":"sf object. Extended Location Interest given StormsList","code":""},{"path":"/reference/getBuffer-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the extended LOI from a StormsList — getBuffer","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\") buff <- getBuffer(sts) }"},{"path":"/reference/getBufferSize-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get buffer size from a StormsList — getBufferSize","title":"Get buffer size from a StormsList — getBufferSize","text":"Get buffer size StormsList","code":""},{"path":"/reference/getBufferSize-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get buffer size from a StormsList — getBufferSize","text":"","code":"getBufferSize(sts)  # S4 method for StormsList getBufferSize(sts)"},{"path":"/reference/getBufferSize-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get buffer size from a StormsList — getBufferSize","text":"sts StormsList","code":""},{"path":"/reference/getBufferSize-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get buffer size from a StormsList — getBufferSize","text":"numeric. Buffer size (km) used generate extended Location Interest given StormsList","code":""},{"path":"/reference/getBufferSize-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get buffer size from a StormsList — getBufferSize","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\") buffsize <- getBufferSize(sts) }"},{"path":"/reference/getInObs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get indices of observations within the extended LOI — getInObs","title":"Get indices of observations within the extended LOI — getInObs","text":"Get indices observations within extended Location Interest given Storm","code":""},{"path":"/reference/getInObs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get indices of observations within the extended LOI — getInObs","text":"","code":"getInObs(s, ...)  # S4 method for StormsList getInObs(s, name, season = NULL)  # S4 method for Storm getInObs(s)"},{"path":"/reference/getInObs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get indices of observations within the extended LOI — getInObs","text":"s Storm/StormsList ... extra argument StormsList name character. Name storm extract capital letters season numeric. Cyclonic season Storm extract. Used several Storm s object share name. Default value set NULL","code":""},{"path":"/reference/getInObs-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get indices of observations within the extended LOI — getInObs","text":"numeric vector. Indices within extended LOI given Storm","code":""},{"path":"/reference/getInObs-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get indices of observations within the extended LOI — getInObs","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\")  ## For storm Niran getInObs(getStorm(sts, name = \"NIRAN\"))  ## Equivalent to getInObs(sts, name = \"NIRAN\") }"},{"path":"/reference/getLOI-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LOI from a StormsList — getLOI","title":"Get LOI from a StormsList — getLOI","text":"Get Location Interest StormsList","code":""},{"path":"/reference/getLOI-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LOI from a StormsList — getLOI","text":"","code":"getLOI(sts)  # S4 method for StormsList getLOI(sts)"},{"path":"/reference/getLOI-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LOI from a StormsList — getLOI","text":"sts StormsList object","code":""},{"path":"/reference/getLOI-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LOI from a StormsList — getLOI","text":"sf object. Location Interest given StormsList","code":""},{"path":"/reference/getLOI-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LOI from a StormsList — getLOI","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\") loi <- getLOI(sts) }"},{"path":"/reference/getNames-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get name(s) of storm(s) — getNames","title":"Get name(s) of storm(s) — getNames","text":"Get name(s) storm(s) available Storm / StormsList","code":""},{"path":"/reference/getNames-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get name(s) of storm(s) — getNames","text":"","code":"getNames(s)  # S4 method for Storm getNames(s)  # S4 method for StormsList getNames(s)"},{"path":"/reference/getNames-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get name(s) of storm(s) — getNames","text":"s Storm / StormsList","code":""},{"path":"/reference/getNames-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get name(s) of storm(s) — getNames","text":"character vector. Names storms provided given Storm / StormsList","code":""},{"path":"/reference/getNames-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get name(s) of storm(s) — getNames","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\")  ## For storm Niran getNames(getStorm(sts, name = \"NIRAN\"))  ## For sts getNames(sts) }"},{"path":"/reference/getNbObs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of observations available — getNbObs","title":"Get the number of observations available — getNbObs","text":"Get number observations available given Storm","code":""},{"path":"/reference/getNbObs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of observations available — getNbObs","text":"","code":"getNbObs(s, ...)  # S4 method for Storm getNbObs(s)  # S4 method for StormsList getNbObs(s, name, season = NULL)"},{"path":"/reference/getNbObs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of observations available — getNbObs","text":"s Storm/StormsList ... extra arguments StormsList name character. Name storm extract capital letters season numeric. Cyclonic season Storm extract. Used several Storm s share name. Default value set NULL","code":""},{"path":"/reference/getNbObs-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of observations available — getNbObs","text":"numeric. Number observations available given Storm","code":""},{"path":"/reference/getNbObs-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of observations available — getNbObs","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\")  ## For storm Niran getNbObs(getStorm(sts, name = \"NIRAN\"))  ## Equivalent to getNbObs(sts, name = \"NIRAN\") }"},{"path":"/reference/getNbStorms-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of Storm in StormsList — getNbStorms","title":"Get number of Storm in StormsList — getNbStorms","text":"Get number Storm available StormsList","code":""},{"path":"/reference/getNbStorms-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of Storm in StormsList — getNbStorms","text":"","code":"getNbStorms(sts)  # S4 method for StormsList getNbStorms(sts)"},{"path":"/reference/getNbStorms-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of Storm in StormsList — getNbStorms","text":"sts StormsList","code":""},{"path":"/reference/getNbStorms-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of Storm in StormsList — getNbStorms","text":"numeric. Number Storm available given StormsList","code":""},{"path":"/reference/getNbStorms-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of Storm in StormsList — getNbStorms","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\") nb <- getNbStorms(sts) }"},{"path":"/reference/getObs-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get observations available — getObs","title":"Get observations available — getObs","text":"Get observations available given Storm","code":""},{"path":"/reference/getObs-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get observations available — getObs","text":"","code":"getObs(s, ...)  # S4 method for StormsList getObs(s, name, season = NULL)  # S4 method for Storm getObs(s)"},{"path":"/reference/getObs-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get observations available — getObs","text":"s Storm/StormsList ... extra argument StormsList name character. Name storm extract capital letters season numeric. Cyclonic season Storm extract. Used several Storm s object share name. Default value set NULL","code":""},{"path":"/reference/getObs-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get observations available — getObs","text":"data.frame. Observations given storm","code":""},{"path":"/reference/getObs-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get observations available — getObs","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\")  ## For storm Niran getObs(getStorm(sts, name = \"NIRAN\"))  ## Equivalent to getObs(sts, name = \"NIRAN\") }"},{"path":"/reference/getSSHS-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum SSHS reached of storm(s) — getSSHS","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"Get maximum Saffir Simpson Hurricane Scale (SSHS) reached storm(s) available Storm / StormsList","code":""},{"path":"/reference/getSSHS-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"","code":"getSSHS(s)  # S4 method for Storm getSSHS(s)  # S4 method for StormsList getSSHS(s)"},{"path":"/reference/getSSHS-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"s Storm / StormsList","code":""},{"path":"/reference/getSSHS-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"numeric vector. Maximum SSHS reached storm provided given Storm / StormsList","code":""},{"path":"/reference/getSSHS-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get maximum SSHS reached of storm(s) — getSSHS","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\")  ## For storm Niran getSSHS(getStorm(sts, name = \"NIRAN\"))  ## For sts getSSHS(sts) }"},{"path":"/reference/getSeasons-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cyclonic season(s) of storm(s) — getSeasons","title":"Get the cyclonic season(s) of storm(s) — getSeasons","text":"Get cyclonic season(s) storm(s) available Storm / StormsList","code":""},{"path":"/reference/getSeasons-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cyclonic season(s) of storm(s) — getSeasons","text":"","code":"getSeasons(s)  # S4 method for Storm getSeasons(s)  # S4 method for StormsList getSeasons(s)"},{"path":"/reference/getSeasons-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cyclonic season(s) of storm(s) — getSeasons","text":"s Storm/StormsList","code":""},{"path":"/reference/getSeasons-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cyclonic season(s) of storm(s) — getSeasons","text":"numeric vector. Cyclonic season(s) storms provided given Storm / StormsList","code":""},{"path":"/reference/getSeasons-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cyclonic season(s) of storm(s) — getSeasons","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\")  ## For storm Niran getSeasons(getStorm(sts, name = \"NIRAN\"))  ## For sts getSeasons(sts) }"},{"path":"/reference/getStorm-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a Storm — getStorm","title":"Extract a Storm — getStorm","text":"Extract Storm StormsList","code":""},{"path":"/reference/getStorm-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a Storm — getStorm","text":"","code":"getStorm(sts, name, season = NULL)  # S4 method for StormsList getStorm(sts, name, season = NULL)"},{"path":"/reference/getStorm-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a Storm — getStorm","text":"sts StormsList name character. Name storm extract season numeric. Cyclonic season Storm extract. Used several Storm sts share name. Default value set de NULL","code":""},{"path":"/reference/getStorm-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a Storm — getStorm","text":"Storm","code":""},{"path":"/reference/getStorm-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a Storm — getStorm","text":"","code":"if (FALSE) { sts <- Storms(loi = \"New Caledonia\") st <- getStorm(sts, name = \"NIRAN\") }"},{"path":"/reference/pam.html","id":null,"dir":"Reference","previous_headings":"","what":"PAM tropical cyclone — pam","title":"PAM tropical cyclone — pam","text":"Gathers informations category 5 TC PAM (2015) Vanuatu buffer 300km","code":""},{"path":"/reference/pam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PAM tropical cyclone — pam","text":"","code":"pam"},{"path":[]},{"path":"/reference/pam.html","id":"pam","dir":"Reference","previous_headings":"","what":"pam","title":"PAM tropical cyclone — pam","text":"StormsList object generated Storms","code":""},{"path":"/reference/plotBehaviour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rasterized information storm behaviour — plotBehaviour","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"function plots rasterized product (among maximum sustained wind, power dissipation index, category exposure, 2D wind speed structure/wind direction given observation) associated Storm provided StormsList alongside track","code":""},{"path":"/reference/plotBehaviour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"","code":"plotBehaviour(   sts,   raster_product,   color_palette = NULL,   main = NULL,   xlim = NULL,   ylim = NULL,   labels = FALSE,   by = 8,   pos = 3,   legends = \"topleft\" )"},{"path":"/reference/plotBehaviour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"sts StormsList raster_product SpatRaster object. Name layer must \"STORMNAME_product\" product either: \"MSW\" \"PDI\" \"Exposure_threshold\" threshold represents wind threshold used compute Exposure raster \"Speed_index\" index stands index observation \"Direction_index\" index stands index observation color_palette character vector. Represents color palette used plot. Default value set NULL, automatically choose color palette provided package depending product main character. Title plot. Default value set NULL set title automatically depending product xlim numeric vector. set longitude coordinates controls longitude extent plot. Default value set NULL let plot extends according longitude range extended LOI ylim numeric vector. set latitude coordinates controls latitude extent plot. Default value set NULL let plot extends according longitude range extended LOI labels logical. Whether plot name labels corresponding indices observations ISO Times along track. Default value set NULL numeric. Defines frequency labels plotted 3 (6) hourly records. Default value set 8 represents 24h (48h) time interval labeled observations. Ignored labels == FALSE pos numeric. Must 1 4. Correspond position labels according observation: 1 (), 2 (left), 3 (), 4 (right). Default value set 3. Ignored labels == FALSE legends character. Indicates legend plotted. Must either \"topright\", \"topleft\",  (default setting), \"bottomleft\", \"bottomright\" \"none\" (legend)","code":""},{"path":"/reference/plotBehaviour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rasterized information storm behaviour — plotBehaviour","text":"","code":"if (FALSE) { pam <- Storms(loi = \"Vanuatu\", names = \"PAM\")  #Plot MSW raster for Pam (2015) in Vanuatu pam.msw <- spatialBehaviour(pam, verbose = 0) plotBehaviour(pam, pam.msw)  #Plot a 2D windspeed structure  for Pam (2015) in Vanuatu pam.prof <- spatialBehaviour(pam, product = \"Profiles\", verbose = 0) plotBehaviour(pam, pam.prof$PAM_Speed_37, labels = TRUE, pos = 4) }"},{"path":"/reference/plotStorms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot storm track(s) — plotStorms","title":"Plot storm track(s) — plotStorms","text":"function plots set storm tracks contained StormsList (See Storms function). Depending inputs, user can choose plot desired set Storm extracted StormsList","code":""},{"path":"/reference/plotStorms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot storm track(s) — plotStorms","text":"","code":"plotStorms(   sts,   names = NULL,   category = NULL,   xlim = NULL,   ylim = NULL,   labels = FALSE,   by = 8,   pos = 3,   legends = \"topleft\",   loi = TRUE )"},{"path":"/reference/plotStorms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot storm track(s) — plotStorms","text":"sts StormsList names character vector. Name(s) storm(s) capital letters plot map. Default value set NULL, plot every storm provided sts. see Storm included StormsList , use getNames function category numeric vector. either category range categories Saffir Simpson scale (-1 5). Default value set NULL consider every Storm sts. Otherwise consider Storm reached category input xlim numeric vector. set longitude coordinates controls longitude extent plot. Default value set NULL let plot extends according longitude range extended LOI ylim numeric vector. set latitude coordinates controls latitude extent plot. Default value set NULL let plot extends according latitude range extended LOI labels logical. Whether plot names labels corresponding indices observations ISO Times along track(s). Default value set NULL numeric. Defines frequency labels plotted 3 (6) hourly records. Default value set 8 represents 24h (48h) time interval labeled observations. Ignored labels == FALSE pos numeric. Must 1 4. Correspond position labels according observation: 1 (), 2 (left), 3 (), 4 (right). Default value set 3. Ignored labels == FALSE legends character. Indicates legend plotted. Must either \"topright\", \"topleft\",  (default setting), \"bottomleft\", \"bottomright\" \"none\" (legend) loi logical. Whether plot extended LOI map. Default value set TRUE","code":""},{"path":"/reference/plotStorms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot storm track(s) — plotStorms","text":"","code":"if (FALSE) { #Plot Niran over New Caledonia with labels every 24h plotStorms(sts_nc, names = \"NIRAN\", labels = TRUE)  #Plot Niran, with labels every 6h on the right side of observations plotStorms(sts_nc, names = \"NIRAN\", labels = TRUE, by = 2, pos = 4)  }"},{"path":"/reference/spatialBehaviour.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute indicators of storm behaviour — spatialBehaviour","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"function computes/rasterizes products Storm included StormsList, among Maximum Sustained Wind, Power Dissipation Index, Category exposure 2D wind speed structures/direction wind speed every observations","code":""},{"path":"/reference/spatialBehaviour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"","code":"spatialBehaviour(   sts,   product = \"MSW\",   wind_threshold = c(18, 33, 42, 49, 58, 70),   method = \"Willoughby\",   asymmetry = \"Chen\",   empirical_rmw = FALSE,   space_res = \"2.5min\",   temp_res = 1,   verbose = 2 )"},{"path":"/reference/spatialBehaviour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"sts StormsList product character. Product compute among: \"MSW\": Maximum Sustained Wind \"PDI\": Power Dissipation Index \"Exposure\": hour exposition wind greater wind_threshold \"Profiles\", 2D wind speed structures wind speed wind direction observation Default value set \"MSW\" wind_threshold numeric vector. Minimal wind threshold(s) (m/s) compute \"Exposure\" product. Ignored \"Exposure\" part products compute. Default value set Saffir Simpson Hurricane Scale thresholds method character. Cyclonic model used compute product. Must either: \"Willoughby\": model based fits performed cyclonic observations \"Holland\": model based basic cyclonic Physics parameters fitting according cyclonic observations \"Boose\": asymmetric model based Holland model Default value set \"Willoughby\" (See Details) asymmetry character. Indicates version asymmetry use computations (see Details). Must either: \"Miyazaki\": based formula derived Miyazaki et al. (1962) \"Chen\":  based formula derived Chen (1994) \"None\": asymmetry added Default value set \"Chen\". Ignored method == \"Boose\" empirical_rmw logical. Whether compute radius maximum wind empirically using radius maximum wind observations. Default value set FALSE. TRUE, formula extracted Willoughby et al. 2006 used compute rmw space_res character. Space resolution raster(s) compute. Either \"30sec\", \"2.5min\", \"5min\" \"10min\". Default value set \"2.5min\" temp_res numeric. Period time used interpolate data. Allowed values 1 (60min), 0.75 (45min), 0.5 (30min), 0.25 (15min). Default value set 1 verbose numeric. Whether function display informations process /outputs. Allowed values : 0: Nothing displayed 1: Informations process displayed 2: Outputs also displayed Default value set 2","code":""},{"path":"/reference/spatialBehaviour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"SpatRaster stack provides desired product computed, projected WGS84 spanning extented LOI StormsList . Number layers depends number Storm available sts also product temp_res inputs: \"MSW\" produces one layer per Storm. Name layer \"STORMNAME_MSW\" \"PDI\" produces one layer per Storm. Name layer \"STORMNAME_PDI\" \"Exposure\" produces one layer wind values available wind_threshold Storm. Name layers \"STORMNAME_Exposure_threshold1\", \"STORMNAME_Exposure_threshold2\"... \"Profiles\" produces two layers observations (real interpolated)  Storm. Name layers \"STORMNAME_Speed_observation\", \"STORMNAME_Direction_observation\"","code":""},{"path":"/reference/spatialBehaviour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"temp_res input perform linear interpolation observations compute 2D wind speed structure interpolated observations. example, temp_res == 1, generate observations every 1hour available observations. , 2D wind speed structure computed stacked observations (available interpolated) compute desired product(s) afterwards. product == \"Profiles\", nothing else performed. Otherwise depending product(s) compute, calculations carried stack terra::focal functions applied final raster(s) smooth result(s).","code":""},{"path":"/reference/spatialBehaviour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute indicators of storm behaviour — spatialBehaviour","text":"","code":"if (FALSE) { #Compute MSW product for Pam 2015 in Vanuatu using default settings msw.pam <- spatialBehaviour(pam)  #Compute PDI product for Storms in sts_nc using Holland model without asymmetry pdi.nc <- spatialBehaviour(sts_nc, method = \"Holland\", product = \"PDI\", asymmetry = \"None\")  #Compute Exposure for Pam 2015 in Vanuatu using default settings exp.pam <- spatialBehaviour(pam, product = \"Exposure\")  #Compute profiles for Storms in sts_nc using default settings prof.nc <- spatialBehaviour(sts_nc, product = \"Profiles\") }"},{"path":"/reference/sts_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"ERICA and NIRAN tropical cyclones — sts_nc","title":"ERICA and NIRAN tropical cyclones — sts_nc","text":"Gathers informations category 4 5 TC ERICA (2003) NIRAN (2021) New Caledonia buffer 300km","code":""},{"path":"/reference/sts_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ERICA and NIRAN tropical cyclones — sts_nc","text":"","code":"sts_nc"},{"path":[]},{"path":"/reference/sts_nc.html","id":"sts-nc","dir":"Reference","previous_headings":"","what":"sts_nc","title":"ERICA and NIRAN tropical cyclones — sts_nc","text":"StormsList object generated Storms","code":""},{"path":"/reference/temporalBehaviour.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute indicators of storm behaviour — temporalBehaviour","title":"Compute indicators of storm behaviour — temporalBehaviour","text":"function pointwise version spatialBehaviour. Available products Time Series wind speed (TS), Power Dissipation Index (PDI) Exposure","code":""},{"path":"/reference/temporalBehaviour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute indicators of storm behaviour — temporalBehaviour","text":"","code":"temporalBehaviour(   sts,   points,   product = \"TS\",   wind_threshold = c(18, 33, 42, 49, 58, 70),   method = \"Willoughby\",   asymmetry = \"Chen\",   empirical_rmw = FALSE,   temp_res = 1,   verbose = 1 )"},{"path":"/reference/temporalBehaviour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute indicators of storm behaviour — temporalBehaviour","text":"sts StormsList points data.frame. Contains longitude/latitude coordinates within column names x y, compute desired product product character. Product compute. Must either: \"TS\": Time Series wind speed \"PDI\": Power Dissipation Index \"Exposure\": hour exposition wind greater wind_threshold Default value set \"TS\" wind_threshold numeric vector. Minimal wind threshold(s) (m/s) compute \"Exposure\" product. Ignored \"Exposure\" part products compute. Default value set Saffir Simpson Hurricane Scale thresholds method character. Cyclonic model used compute product. Must either: \"Willoughby\": model based fits performed cyclonic observations \"Holland\": model based basic cyclonic Physics parameters fitting according cyclonic observations \"Boose\": asymmetric model based Holland model Default value set \"Willoughby\" (See Details) asymmetry character. Indicates version asymmetry use computations (see Details). Must either: \"Miyazaki\": based formula derived Miyazaki et al. (1962) \"Chen\":  based formula derived Chen (1994) \"None\": asymmetry added Default value set \"Chen\". Ignored method == \"Boose\" empirical_rmw logical. Whether compute radius maximum wind empirically using radius maximum wind observations. Default value set FALSE. TRUE, formula extracted Willoughby et al. 2006 used compute rmw temp_res numeric. Period time used interpolate data. Allowed values 1 (60min), 0.75 (45min), 0.5 (30min), 0.25 (15min). Default value set 1 verbose numeric. Whether function display informations process /outputs. Allowed values : 0: Nothing displayed 1: Informations process displayed 2: Outputs also displayed Default value set 2","code":""},{"path":"/reference/temporalBehaviour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute indicators of storm behaviour — temporalBehaviour","text":"Computed product points returned lists data.frame (one per points coordinates) contained named list. , slot, named storm, made list(s) data.frame following dimensions: product == \"TS\": data frame whose number rows corresponds number interpolated observations. columns provides respectively wind speed values (m/s), wind directions (degree), indices ISO time observations product == \"PDI\": data.frame one row one column contains PDI value point points. product == \"Exposure\": data.frame one row wind threshold one column contains Exposure value point points.","code":""},{"path":"/reference/temporalBehaviour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute indicators of storm behaviour — temporalBehaviour","text":"temp_res input perform linear interpolation observations compute 2D wind speed structure interpolated observations. example, temp_res == 1, generate observations every 1hour available observations.","code":""},{"path":"/reference/temporalBehaviour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute indicators of storm behaviour — temporalBehaviour","text":"","code":"if (FALSE) { pts <- data.frame(lon = c(166.5, 163), lat = c(-22, -19))  #Compute time series of wind speed for ERICA and NIRAN on points #provided in pts using default settings ts_nc <- temporalBehaviour(sts_nc, points = pts)  #Compute PDI for ERICA and NIRAN on points provided in pts using default settings pdiPt_nc <- temporalBehaviour(sts_nc, points = pts, product = \"PDI\")  #Compute Exposure for ERICA and NIRAN on points provided in df using default settings expPt_nc <- temporalBehaviour(sts_nc, points = pts, product = \"Exposure\", wind_threshold = c(20,30)) }"},{"path":"/reference/test_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"example of dataset — test_dataset","title":"example of dataset — test_dataset","text":"Toy dataset extracted IBTrACS.SP.v04r00.nc file. Provides tropical cyclones occured around Vanuatu 2015 2016 around New Caledonia 2020 2021. References: Knapp, K. R., M. C. Kruk, D. H. Levinson, H. J. Diamond, C. J. Neumann, 2010: International Best Track Archive Climate Stewardship (IBTrACS): Unifying tropical cyclone best track data. Bulletin American Meteorological Society, 91, 363-376. doi:10.1175/2009BAMS2755.1","code":""},{"path":"/reference/test_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example of dataset — test_dataset","text":"","code":"test_dataset"},{"path":[]},{"path":"/reference/test_dataset.html","id":"test-dataset","dir":"Reference","previous_headings":"","what":"test_dataset","title":"example of dataset — test_dataset","text":"StormsDataset object","code":""},{"path":"/reference/test_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"example of dataset — test_dataset","text":"Knapp, K. R., H. J. Diamond, J. P. Kossin, M. C. Kruk, C. J. Schreck, 2018: International Best Track Archive Climate Stewardship (IBTrACS) Project, Version 4. NOAA National Centers Environmental Information. doi:10.25921/82ty-9e16","code":""},{"path":"/reference/writeRast.html","id":null,"dir":"Reference","previous_headings":"","what":"Save raster(s) in the desired format — writeRast","title":"Save raster(s) in the desired format — writeRast","text":"function writes SpatRaster(s) given format among Geotiff netcdf","code":""},{"path":"/reference/writeRast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save raster(s) in the desired format — writeRast","text":"","code":"writeRast(rast, format = \".tiff\", filename = NULL, path = \"./\")"},{"path":"/reference/writeRast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save raster(s) in the desired format — writeRast","text":"rast SpatRaster object format character. Format file export. Either \".tiff\" \".nc\". Default value set \".tiff\" filename character. Name file. Default value set NULL, case set names(rast) path character. Relative path file written","code":""},{"path":"/reference/writeRast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save raster(s) in the desired format — writeRast","text":"NULL","code":""},{"path":"/reference/writeRast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save raster(s) in the desired format — writeRast","text":"","code":"if (FALSE) { pam <- Storms(loi = \"Vanuatu\", names = \"PAM\") pam.msw <- spatialBehaviour(pam) #Save MSW raster in Geotiff file for Pam 2015 over Vanuatu writeRast(pam.msw, path = paste0(tempdir(),\"/\"))  sts.nc <- Storms(loi = \"New Caledonia\") pdi.nc <- spatialBehaviour(sts.nc, product = \"PDI\") #Save PDI rasters in Geotiff files contained in pdi.nc writeRast(pdi.nc, path = paste0(tempdir(),\"/\")) }"},{"path":"/news/index.html","id":"stormr-001","dir":"Changelog","previous_headings":"","what":"StormR 0.0.1","title":"StormR 0.0.1","text":"First implementation StormR package","code":""}]
